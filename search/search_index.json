{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Picharsso # A utility for converting images to text art. Installation # Run the following command: pip install picharsso This will: download and install the picharsso Python package (along with its dependencies). create an executable, picharsso , for the CLI (command line interface). Verification To verify that Picharsso is installed, run: python -c \"import picharsso\" Commands (CLI) # Picharsso ships with a CLI that provides some basic functionality from the terminal. Usage Run the following command to display a helpful message: picharsso -h Usage: picharsso [options] <command> [args] A utility for converting images to text art. Options: -h, --help Show this message and exit. Commands: draw Generate text art from an image. info Displays package information. Consider the following image: Apple Computer [Rob Janoff, 1977] To convert an image to text art, run: Braille picharsso draw -c -H 32 <path/to/image> braille Here's what it should look like: Breakdown Argument Effect -c Apply image colors to the output text. -H 32 Sets the number of lines of the output text to 32 . braille Use the Braille style . Gradient picharsso draw -c -H 32 <path/to/image> gradient Here's what it should look like: Breakdown Argument Effect -c Apply image colors to the output text. -H 32 Sets the number of lines of the output text to 32 . gradient Use the gradient style . Warning Don't forget to replace <path/to/image> . CLI Refer to the CLI documentation to learn about the various commands and arguments . Library (API) # The example from the previous section can be implemented in just a few lines of Python: Braille 1 2 3 4 5 6 7 8 9 10 11 12 from PIL import Image from picharsso import new_drawer if __name__ == \"__main__\" : # Open image image = Image . open ( \"<path/to/image>\" ) # Define drawer drawer = new_drawer ( \"braille\" , height = 32 , colorize = True ) # Print drawer output print ( drawer ( image )) Gradient 1 2 3 4 5 6 7 8 9 10 11 12 from PIL import Image from picharsso import new_drawer if __name__ == \"__main__\" : # Open image image = Image . open ( \"<path/to/image>\" ) # Define drawer drawer = new_drawer ( \"gradient\" , height = 32 , colorize = True ) # Print drawer output print ( drawer ( image )) Pillow Picharsso integrates well with Pillow , the friendly PIL fork. Styles Refer to the Styles documentation for an in-depth guide to the image processing behind Picharsso . Now consider this animated GIF: Nyan Cat With some more lines of code, you can animate GIFs in text! Braille 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import time from PIL import Image from picharsso import new_drawer from picharsso.utils import clear_screen , terminal_size if __name__ == \"__main__\" : # Open image image = Image . open ( \"<path/to/image>\" ) # Get terminal height height , _ = terminal_size () # Define drawer drawer = new_drawer ( \"braille\" , height = height , colorize = True , threshold = 0 ) # Iterate over frames texts = [] for frame_id in range ( image . n_frames ): # Select frame image . seek ( frame_id ) # Save output for frame texts . append ( drawer ( image )) # Iterate over saved outputs in a circular manner num_frames = len ( texts ) counter = 0 while True : # Refresh clear_screen () # Print output print ( texts [ counter ]) # Set a delay between frames time . sleep ( 1 / num_frames ) # Circular increment counter = ( counter + 1 ) % num_frames Here's what it should look like: Gradient 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import time from PIL import Image from picharsso import new_drawer from picharsso.utils import clear_screen , terminal_size if __name__ == \"__main__\" : # Open image image = Image . open ( \"<path/to/image>\" ) # Get terminal height height , _ = terminal_size () # Define drawer drawer = new_drawer ( \"gradient\" , height = height , colorize = True ) # Iterate over frames texts = [] for frame_id in range ( image . n_frames ): # Select frame image . seek ( frame_id ) # Save output for frame texts . append ( drawer ( image )) # Iterate over saved outputs in a circular manner num_frames = len ( texts ) counter = 0 while True : # Refresh clear_screen () # Print output print ( texts [ counter ]) # Set a delay between frames time . sleep ( 1 / num_frames ) # Circular increment counter = ( counter + 1 ) % num_frames Here's what it should look like: API Refer to the API documentation to learn about the various classes and functions . Examples Check out some more examples . You can use an image directly from the web too!","title":"Home"},{"location":"#picharsso","text":"A utility for converting images to text art.","title":"Picharsso"},{"location":"#installation","text":"Run the following command: pip install picharsso This will: download and install the picharsso Python package (along with its dependencies). create an executable, picharsso , for the CLI (command line interface). Verification To verify that Picharsso is installed, run: python -c \"import picharsso\"","title":"Installation"},{"location":"#commands-cli","text":"Picharsso ships with a CLI that provides some basic functionality from the terminal. Usage Run the following command to display a helpful message: picharsso -h Usage: picharsso [options] <command> [args] A utility for converting images to text art. Options: -h, --help Show this message and exit. Commands: draw Generate text art from an image. info Displays package information. Consider the following image: Apple Computer [Rob Janoff, 1977] To convert an image to text art, run: Braille picharsso draw -c -H 32 <path/to/image> braille Here's what it should look like: Breakdown Argument Effect -c Apply image colors to the output text. -H 32 Sets the number of lines of the output text to 32 . braille Use the Braille style . Gradient picharsso draw -c -H 32 <path/to/image> gradient Here's what it should look like: Breakdown Argument Effect -c Apply image colors to the output text. -H 32 Sets the number of lines of the output text to 32 . gradient Use the gradient style . Warning Don't forget to replace <path/to/image> . CLI Refer to the CLI documentation to learn about the various commands and arguments .","title":"Commands (CLI)"},{"location":"#library-api","text":"The example from the previous section can be implemented in just a few lines of Python: Braille 1 2 3 4 5 6 7 8 9 10 11 12 from PIL import Image from picharsso import new_drawer if __name__ == \"__main__\" : # Open image image = Image . open ( \"<path/to/image>\" ) # Define drawer drawer = new_drawer ( \"braille\" , height = 32 , colorize = True ) # Print drawer output print ( drawer ( image )) Gradient 1 2 3 4 5 6 7 8 9 10 11 12 from PIL import Image from picharsso import new_drawer if __name__ == \"__main__\" : # Open image image = Image . open ( \"<path/to/image>\" ) # Define drawer drawer = new_drawer ( \"gradient\" , height = 32 , colorize = True ) # Print drawer output print ( drawer ( image )) Pillow Picharsso integrates well with Pillow , the friendly PIL fork. Styles Refer to the Styles documentation for an in-depth guide to the image processing behind Picharsso . Now consider this animated GIF: Nyan Cat With some more lines of code, you can animate GIFs in text! Braille 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import time from PIL import Image from picharsso import new_drawer from picharsso.utils import clear_screen , terminal_size if __name__ == \"__main__\" : # Open image image = Image . open ( \"<path/to/image>\" ) # Get terminal height height , _ = terminal_size () # Define drawer drawer = new_drawer ( \"braille\" , height = height , colorize = True , threshold = 0 ) # Iterate over frames texts = [] for frame_id in range ( image . n_frames ): # Select frame image . seek ( frame_id ) # Save output for frame texts . append ( drawer ( image )) # Iterate over saved outputs in a circular manner num_frames = len ( texts ) counter = 0 while True : # Refresh clear_screen () # Print output print ( texts [ counter ]) # Set a delay between frames time . sleep ( 1 / num_frames ) # Circular increment counter = ( counter + 1 ) % num_frames Here's what it should look like: Gradient 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import time from PIL import Image from picharsso import new_drawer from picharsso.utils import clear_screen , terminal_size if __name__ == \"__main__\" : # Open image image = Image . open ( \"<path/to/image>\" ) # Get terminal height height , _ = terminal_size () # Define drawer drawer = new_drawer ( \"gradient\" , height = height , colorize = True ) # Iterate over frames texts = [] for frame_id in range ( image . n_frames ): # Select frame image . seek ( frame_id ) # Save output for frame texts . append ( drawer ( image )) # Iterate over saved outputs in a circular manner num_frames = len ( texts ) counter = 0 while True : # Refresh clear_screen () # Print output print ( texts [ counter ]) # Set a delay between frames time . sleep ( 1 / num_frames ) # Circular increment counter = ( counter + 1 ) % num_frames Here's what it should look like: API Refer to the API documentation to learn about the various classes and functions . Examples Check out some more examples . You can use an image directly from the web too!","title":"Library (API)"},{"location":"contributing/","text":"Contributing # Thank you for your interest in contributing to Picharsso! For someone unfamiliar with the code base, the most efficient way to contribute is to submit a feature request or bug report . If you want to dive into the source code, you can submit a patch as well, either working on your own ideas or existing issues . Feature Requests # Do you have an idea for an awesome new feature for Picharsso? Please submit a feature request . It's great to hear about new ideas! If you are inclined to do so, you're welcome to fork Picharsso, work on implementing the feature yourself, and submit a patch. In this case, it's highly recommended that you first open an issue describing your enhancement to get early feedback on the new feature that you are implementing. This will help avoid wasted efforts and ensure that your work is incorporated into the code base. Bug Reports # Did something go wrong with Picharsso? Sorry about that! Bug reports are greatly appreciated! When you submit a bug report , please include relevant information such as Picharsso version, operating system, error messages, and steps to reproduce the bug. The more details you can include, the easier it is to find and fix the bug. Patches # Want to hack on Picharsso? Awesome! If there are open issues , you're more than welcome to work on those - this is probably the best way to contribute to Picharsso. If you have your own ideas, that's great too! In that case, before working on substantial changes to the code base, it is highly recommended that you first open an issue describing what you intend to work on. Patches are generally submitted as pull requests. Any changes to the code base should follow the style and coding conventions used in the rest of the project. The version history should be clean, and commit messages should be descriptive and properly formatted .","title":"Contributing"},{"location":"contributing/#contributing","text":"Thank you for your interest in contributing to Picharsso! For someone unfamiliar with the code base, the most efficient way to contribute is to submit a feature request or bug report . If you want to dive into the source code, you can submit a patch as well, either working on your own ideas or existing issues .","title":"Contributing"},{"location":"contributing/#feature-requests","text":"Do you have an idea for an awesome new feature for Picharsso? Please submit a feature request . It's great to hear about new ideas! If you are inclined to do so, you're welcome to fork Picharsso, work on implementing the feature yourself, and submit a patch. In this case, it's highly recommended that you first open an issue describing your enhancement to get early feedback on the new feature that you are implementing. This will help avoid wasted efforts and ensure that your work is incorporated into the code base.","title":"Feature Requests"},{"location":"contributing/#bug-reports","text":"Did something go wrong with Picharsso? Sorry about that! Bug reports are greatly appreciated! When you submit a bug report , please include relevant information such as Picharsso version, operating system, error messages, and steps to reproduce the bug. The more details you can include, the easier it is to find and fix the bug.","title":"Bug Reports"},{"location":"contributing/#patches","text":"Want to hack on Picharsso? Awesome! If there are open issues , you're more than welcome to work on those - this is probably the best way to contribute to Picharsso. If you have your own ideas, that's great too! In that case, before working on substantial changes to the code base, it is highly recommended that you first open an issue describing what you intend to work on. Patches are generally submitted as pull requests. Any changes to the code base should follow the style and coding conventions used in the rest of the project. The version history should be clean, and commit messages should be descriptive and properly formatted .","title":"Patches"},{"location":"license/","text":"License # MIT License Copyright (c) 2019 Kelvin DeCosta Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright (c) 2019 Kelvin DeCosta Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"commands/","text":"picharsso # A utility for converting images to text art. Usage # picharsso [ options ] <command> [ args ] Options # -h , --help # Show this message and exit. Message Usage: picharsso [options] <command> [args] A utility for converting images to text art. Options: -h, --help Show this message and exit. Commands: draw Generate text art from an image. info Displays package information. Subcommands # draw # Generate text art from an image. info # Displays package information.","title":"picharsso"},{"location":"commands/#picharsso","text":"A utility for converting images to text art.","title":"picharsso"},{"location":"commands/#usage","text":"picharsso [ options ] <command> [ args ]","title":"Usage"},{"location":"commands/#options","text":"","title":"Options"},{"location":"commands/#-h-help","text":"Show this message and exit. Message Usage: picharsso [options] <command> [args] A utility for converting images to text art. Options: -h, --help Show this message and exit. Commands: draw Generate text art from an image. info Displays package information.","title":"-h, --help"},{"location":"commands/#subcommands","text":"","title":"Subcommands"},{"location":"commands/#draw","text":"Generate text art from an image.","title":"draw"},{"location":"commands/#info","text":"Displays package information.","title":"info"},{"location":"commands/info/","text":"picharsso info # Displays package information. Usage # picharsso info [ options ] Options # -h , --help # Show this message and exit. Message Usage: picharsso info [options] Displays package information. Options: -h, --help Show this message and exit.","title":"picharsso info"},{"location":"commands/info/#picharsso-info","text":"Displays package information.","title":"picharsso info"},{"location":"commands/info/#usage","text":"picharsso info [ options ]","title":"Usage"},{"location":"commands/info/#options","text":"","title":"Options"},{"location":"commands/info/#-h-help","text":"Show this message and exit. Message Usage: picharsso info [options] Displays package information. Options: -h, --help Show this message and exit.","title":"-h, --help"},{"location":"commands/draw/","text":"picharsso draw # Generate text art from an image. Usage # picharsso draw [options] <path> <command> [args] Arguments # <path> # Path to the image file. Options # -c , --colorize # Apply image colors to output text. Example Consider the following image: Instagram picharsso draw [ -c ] -H 32 docs/assets/images/subjects/instagram.webp gradient Here's what it should look like: colorize = False True -m , --mode [ ansi | html ] # Format mode for output text. [default: ansi] Formats Refer to the Formats documentation to learn about the supported output formats. -r , --resample [ nearest | box | bilinear | hamming | bicubic | lanczos ] # Resampling filter. [default: nearest] Example Consider the following image: Starry Night [Vincent van Gogh, 1889] picharsso draw -c -term-h -r <resample> docs/assets/images/subjects/starry-night.webp gradient -s \"\u2588\" Here's what it should look like: resample = 'nearest' 'box' 'bilinear' 'hamming' 'bicubic' 'lanczos' -H , --height INTEGER # Height of output text in characters. If 0, derives from width. [default: 0] Lines height is the number of lines in the text output. Example Consider the following image: Zima Blue [Zima] picharsso draw -c -H 32 docs/assets/images/subjects/zima.webp gradient Here's what it should look like: -W , --width INTEGER # Width of output text in characters. If 0, derives from height. [default: 0] Characters per line width is the number of characters (including whitespace) per line in the text output. Example Consider the following image: Zima Blue [Zima] picharsso draw -c -W 32 docs/assets/images/subjects/zima.webp gradient Here's what it should look like: -term-h , --terminal-height # Sets height to terminal height. Example Consider the following image: Zima Blue [Zima] picharsso draw -c -term-h docs/assets/images/subjects/zima.webp gradient Here's what it should look like: Bug When used while piping , height is set to the default terminal height, which is usually 24 . -term-w , --terminal-width # Sets width to terminal width. Example Consider the following image: Zima Blue [Zima] picharsso draw -c -term-w docs/assets/images/subjects/zima.webp gradient Here's what it should look like: Bug When used while piping , width is set to the default terminal width, which is usually 80 . -h , --help # Show this message and exit. Message Usage: picharsso draw [options] <path> <command> [args] Generate text art from an image. <path> Path to the image file. Options: -c, --colorize Apply image colors to output text. -m, --mode [ansi|html] Format mode for output text. [default: ansi] -r, --resample [nearest|box|bilinear|hamming|bicubic|lanczos] Resampling filter. [default: nearest] -H, --height INTEGER Height of output text in characters. If 0, derives from width. [default: 0] -W, --width INTEGER Width of output text in characters. If 0, derives from height. [default: 0] -term-h, --terminal-height Sets height to terminal height. -term-w, --terminal-width Sets width to terminal width. -h, --help Show this message and exit. Commands: braille Use the Braille style. gradient Use the gradient style. Subcommands # Styles Refer to the Styles documentation for an in-depth guide to the image processing behind Picharsso . braille # Use the Braille style . gradient # Use the gradient style .","title":"picharsso draw"},{"location":"commands/draw/#picharsso-draw","text":"Generate text art from an image.","title":"picharsso draw"},{"location":"commands/draw/#usage","text":"picharsso draw [options] <path> <command> [args]","title":"Usage"},{"location":"commands/draw/#arguments","text":"","title":"Arguments"},{"location":"commands/draw/#path","text":"Path to the image file.","title":"&lt;path&gt;"},{"location":"commands/draw/#options","text":"","title":"Options"},{"location":"commands/draw/#-c-colorize","text":"Apply image colors to output text. Example Consider the following image: Instagram picharsso draw [ -c ] -H 32 docs/assets/images/subjects/instagram.webp gradient Here's what it should look like: colorize = False True","title":"-c, --colorize"},{"location":"commands/draw/#-m-mode-ansihtml","text":"Format mode for output text. [default: ansi] Formats Refer to the Formats documentation to learn about the supported output formats.","title":"-m, --mode [ansi|html]"},{"location":"commands/draw/#-r-resample-nearestboxbilinearhammingbicubiclanczos","text":"Resampling filter. [default: nearest] Example Consider the following image: Starry Night [Vincent van Gogh, 1889] picharsso draw -c -term-h -r <resample> docs/assets/images/subjects/starry-night.webp gradient -s \"\u2588\" Here's what it should look like: resample = 'nearest' 'box' 'bilinear' 'hamming' 'bicubic' 'lanczos'","title":"-r, --resample [nearest|box|bilinear|hamming|bicubic|lanczos]"},{"location":"commands/draw/#-h-height-integer","text":"Height of output text in characters. If 0, derives from width. [default: 0] Lines height is the number of lines in the text output. Example Consider the following image: Zima Blue [Zima] picharsso draw -c -H 32 docs/assets/images/subjects/zima.webp gradient Here's what it should look like:","title":"-H, --height INTEGER"},{"location":"commands/draw/#-w-width-integer","text":"Width of output text in characters. If 0, derives from height. [default: 0] Characters per line width is the number of characters (including whitespace) per line in the text output. Example Consider the following image: Zima Blue [Zima] picharsso draw -c -W 32 docs/assets/images/subjects/zima.webp gradient Here's what it should look like:","title":"-W, --width INTEGER"},{"location":"commands/draw/#-term-h-terminal-height","text":"Sets height to terminal height. Example Consider the following image: Zima Blue [Zima] picharsso draw -c -term-h docs/assets/images/subjects/zima.webp gradient Here's what it should look like: Bug When used while piping , height is set to the default terminal height, which is usually 24 .","title":"-term-h, --terminal-height"},{"location":"commands/draw/#-term-w-terminal-width","text":"Sets width to terminal width. Example Consider the following image: Zima Blue [Zima] picharsso draw -c -term-w docs/assets/images/subjects/zima.webp gradient Here's what it should look like: Bug When used while piping , width is set to the default terminal width, which is usually 80 .","title":"-term-w, --terminal-width"},{"location":"commands/draw/#-h-help","text":"Show this message and exit. Message Usage: picharsso draw [options] <path> <command> [args] Generate text art from an image. <path> Path to the image file. Options: -c, --colorize Apply image colors to output text. -m, --mode [ansi|html] Format mode for output text. [default: ansi] -r, --resample [nearest|box|bilinear|hamming|bicubic|lanczos] Resampling filter. [default: nearest] -H, --height INTEGER Height of output text in characters. If 0, derives from width. [default: 0] -W, --width INTEGER Width of output text in characters. If 0, derives from height. [default: 0] -term-h, --terminal-height Sets height to terminal height. -term-w, --terminal-width Sets width to terminal width. -h, --help Show this message and exit. Commands: braille Use the Braille style. gradient Use the gradient style.","title":"-h, --help"},{"location":"commands/draw/#subcommands","text":"Styles Refer to the Styles documentation for an in-depth guide to the image processing behind Picharsso .","title":"Subcommands"},{"location":"commands/draw/#braille","text":"Use the Braille style .","title":"braille"},{"location":"commands/draw/#gradient","text":"Use the gradient style .","title":"gradient"},{"location":"commands/draw/braille/","text":"picharsso draw braille # Use the Braille style . Example Consider the following image: Apple Computer [Rob Janoff, 1977] Here's what it should look like: Usage # picharsso draw braille [ options ] Options # -t , --threshold INTEGER RANGE # Threshold pixel luminance (from grayscale). [default: 64] Example Consider the following image: Tiles ressembling GitHub contributions picharsso draw -c -H 32 docs/assets/images/subjects/contributions.webp braille -t <threshold> Here's what it should look like: threshold = 0 70 108 168 210 -h , --help # Show this message and exit. Message Usage: picharsso draw braille [options] Use the Braille style. Options: -t, --threshold INTEGER RANGE Threshold pixel luminance (from grayscale). [default: 64] -h, --help Show this message and exit.","title":"picharsso draw braille"},{"location":"commands/draw/braille/#picharsso-draw-braille","text":"Use the Braille style . Example Consider the following image: Apple Computer [Rob Janoff, 1977] Here's what it should look like:","title":"picharsso draw braille"},{"location":"commands/draw/braille/#usage","text":"picharsso draw braille [ options ]","title":"Usage"},{"location":"commands/draw/braille/#options","text":"","title":"Options"},{"location":"commands/draw/braille/#-t-threshold-integer-range","text":"Threshold pixel luminance (from grayscale). [default: 64] Example Consider the following image: Tiles ressembling GitHub contributions picharsso draw -c -H 32 docs/assets/images/subjects/contributions.webp braille -t <threshold> Here's what it should look like: threshold = 0 70 108 168 210","title":"-t, --threshold INTEGER RANGE"},{"location":"commands/draw/braille/#-h-help","text":"Show this message and exit. Message Usage: picharsso draw braille [options] Use the Braille style. Options: -t, --threshold INTEGER RANGE Threshold pixel luminance (from grayscale). [default: 64] -h, --help Show this message and exit.","title":"-h, --help"},{"location":"commands/draw/gradient/","text":"picharsso draw gradient # Use the gradient style . Example Consider the following image: Apple Computer [Rob Janoff, 1977] Here's what it should look like: Usage # picharsso draw gradient [ options ] Options: # -s , --charset TEXT # Character set ordered by increasing 'brightness'. [default: :!?PG@] Example Consider the following image: Slack picharsso draw -c -H 32 docs/assets/images/subjects/slack.webp gradient -s <charset> Here's what it should look like: charset = ' :!?PG@' (default) '.' '#' '\u2588' -n , --negative # Whether to invert output text brightness. Example Consider the following image: GitHub picharsso draw -H 32 docs/assets/images/subjects/github.webp gradient [ -n ] Here's what it should look like: negative = False True -h , --help # Show this message and exit. Message Usage: picharsso draw gradient [options] Use the gradient style. Options: -s, --charset TEXT Character set ordered by increasing 'brightness'. [default: :!?PG@] -n, --negative Whether to invert output text brightness. -h, --help Show this message and exit.","title":"picharsso draw gradient"},{"location":"commands/draw/gradient/#picharsso-draw-gradient","text":"Use the gradient style . Example Consider the following image: Apple Computer [Rob Janoff, 1977] Here's what it should look like:","title":"picharsso draw gradient"},{"location":"commands/draw/gradient/#usage","text":"picharsso draw gradient [ options ]","title":"Usage"},{"location":"commands/draw/gradient/#options","text":"","title":"Options:"},{"location":"commands/draw/gradient/#-s-charset-text","text":"Character set ordered by increasing 'brightness'. [default: :!?PG@] Example Consider the following image: Slack picharsso draw -c -H 32 docs/assets/images/subjects/slack.webp gradient -s <charset> Here's what it should look like: charset = ' :!?PG@' (default) '.' '#' '\u2588'","title":"-s, --charset TEXT"},{"location":"commands/draw/gradient/#-n-negative","text":"Whether to invert output text brightness. Example Consider the following image: GitHub picharsso draw -H 32 docs/assets/images/subjects/github.webp gradient [ -n ] Here's what it should look like: negative = False True","title":"-n, --negative"},{"location":"commands/draw/gradient/#-h-help","text":"Show this message and exit. Message Usage: picharsso draw gradient [options] Use the gradient style. Options: -s, --charset TEXT Character set ordered by increasing 'brightness'. [default: :!?PG@] -n, --negative Whether to invert output text brightness. -h, --help Show this message and exit.","title":"-h, --help"},{"location":"examples/01-image/","text":"Image # This example illustrates how to covert an image to text art. Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #!/usr/bin/env python # -*- coding: utf-8 name> -*- \"\"\"This script converts an image to text art.\"\"\" from pathlib import Path from PIL import Image from picharsso import new_drawer from picharsso.utils import terminal_size if __name__ == \"__main__\" : # Choose image # image_path = \"<path/to/image>\" image_path = Path ( __file__ ) . parent / \"hackerman.webp\" # Open image image = Image . open ( image_path ) # Choose an art style style = \"gradient\" # or \"braille\" # Set height height , _ = terminal_size () # Define drawer drawer = new_drawer ( style , height = height , colorize = True ) # Print drawer output print ( drawer ( image )) Result Consider the following image: Elliot Anderson is Hackerman [u/JBisBlu] The output of the above script should look like this:","title":"Image"},{"location":"examples/01-image/#image","text":"This example illustrates how to covert an image to text art. Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #!/usr/bin/env python # -*- coding: utf-8 name> -*- \"\"\"This script converts an image to text art.\"\"\" from pathlib import Path from PIL import Image from picharsso import new_drawer from picharsso.utils import terminal_size if __name__ == \"__main__\" : # Choose image # image_path = \"<path/to/image>\" image_path = Path ( __file__ ) . parent / \"hackerman.webp\" # Open image image = Image . open ( image_path ) # Choose an art style style = \"gradient\" # or \"braille\" # Set height height , _ = terminal_size () # Define drawer drawer = new_drawer ( style , height = height , colorize = True ) # Print drawer output print ( drawer ( image )) Result Consider the following image: Elliot Anderson is Hackerman [u/JBisBlu] The output of the above script should look like this:","title":"Image"},{"location":"examples/02-gif/","text":"GIF # This example illustrates how to animate a GIF image in text art. Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #!/usr/bin/env python # -*- coding: utf-8 name> -*- \"\"\"This script animates a GIF image in text art.\"\"\" from pathlib import Path import time from PIL import Image from picharsso import new_drawer from picharsso.utils import clear_screen , terminal_size if __name__ == \"__main__\" : # Choose image # image_path = \"<path/to/image>\" image_path = Path ( __file__ ) . parent / ( \"nyan.webp\" ) # Open image image = Image . open ( image_path ) # Get terminal height height , _ = terminal_size () # Choose an art style style = \"gradient\" # or \"braille\" # Define drawer drawer = new_drawer ( style , height = height , colorize = True ) # Iterate over frames texts = [] for frame_id in range ( image . n_frames ): # Select frame image . seek ( frame_id ) # Save output for frame texts . append ( drawer ( image )) # Iterate over saved outputs in a circular manner num_frames = len ( texts ) counter = 0 while True : # Refresh clear_screen () # Print output print ( texts [ counter ]) # Set a delay between frames time . sleep ( 1 / num_frames ) # Circular increment counter = ( counter + 1 ) % num_frames Result Consider the following image: Nyan Cat The output of the above script should look like this:","title":"GIF"},{"location":"examples/02-gif/#gif","text":"This example illustrates how to animate a GIF image in text art. Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #!/usr/bin/env python # -*- coding: utf-8 name> -*- \"\"\"This script animates a GIF image in text art.\"\"\" from pathlib import Path import time from PIL import Image from picharsso import new_drawer from picharsso.utils import clear_screen , terminal_size if __name__ == \"__main__\" : # Choose image # image_path = \"<path/to/image>\" image_path = Path ( __file__ ) . parent / ( \"nyan.webp\" ) # Open image image = Image . open ( image_path ) # Get terminal height height , _ = terminal_size () # Choose an art style style = \"gradient\" # or \"braille\" # Define drawer drawer = new_drawer ( style , height = height , colorize = True ) # Iterate over frames texts = [] for frame_id in range ( image . n_frames ): # Select frame image . seek ( frame_id ) # Save output for frame texts . append ( drawer ( image )) # Iterate over saved outputs in a circular manner num_frames = len ( texts ) counter = 0 while True : # Refresh clear_screen () # Print output print ( texts [ counter ]) # Set a delay between frames time . sleep ( 1 / num_frames ) # Circular increment counter = ( counter + 1 ) % num_frames Result Consider the following image: Nyan Cat The output of the above script should look like this:","title":"GIF"},{"location":"examples/03-web/","text":"Web # This example illustrates how to animate a GIF image, from the web, in text art. Try it yourself! \u00a1Apagando las luces! Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #!/usr/bin/env python # -*- coding: utf-8 name> -*- \"\"\"This script animates a GIF image, from the web, in text art.\"\"\" from io import BytesIO import time from PIL import Image from picharsso import new_drawer from picharsso.utils import clear_screen , terminal_size import requests if __name__ == \"__main__\" : # Set URL of image image_url = \"https://bit.ly/3hs2Vxr\" # Open Image from respose content response = requests . get ( image_url ) image = Image . open ( BytesIO ( response . content )) # Get terminal height height , _ = terminal_size () # Choose an art style style = \"gradient\" # or \"braille\" # Define drawer drawer = new_drawer ( style , height = height , colorize = True ) # Iterate over frames texts = [] for frame_id in range ( image . n_frames ): # Select frame image . seek ( frame_id ) # Save output for frame texts . append ( drawer ( image )) # Iterate over saved outputs in a circular manner num_frames = len ( texts ) counter = 0 while True : # Refresh clear_screen () # Print output print ( texts [ counter ]) # Set a delay between frames time . sleep ( 1 / num_frames ) # Circular increment counter = ( counter + 1 ) % num_frames Note Although this example uses an animated GIF as input, the same principle can be applied to static images from the web. Warning This example requires the requests library .","title":"Web"},{"location":"examples/03-web/#web","text":"This example illustrates how to animate a GIF image, from the web, in text art. Try it yourself! \u00a1Apagando las luces! Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #!/usr/bin/env python # -*- coding: utf-8 name> -*- \"\"\"This script animates a GIF image, from the web, in text art.\"\"\" from io import BytesIO import time from PIL import Image from picharsso import new_drawer from picharsso.utils import clear_screen , terminal_size import requests if __name__ == \"__main__\" : # Set URL of image image_url = \"https://bit.ly/3hs2Vxr\" # Open Image from respose content response = requests . get ( image_url ) image = Image . open ( BytesIO ( response . content )) # Get terminal height height , _ = terminal_size () # Choose an art style style = \"gradient\" # or \"braille\" # Define drawer drawer = new_drawer ( style , height = height , colorize = True ) # Iterate over frames texts = [] for frame_id in range ( image . n_frames ): # Select frame image . seek ( frame_id ) # Save output for frame texts . append ( drawer ( image )) # Iterate over saved outputs in a circular manner num_frames = len ( texts ) counter = 0 while True : # Refresh clear_screen () # Print output print ( texts [ counter ]) # Set a delay between frames time . sleep ( 1 / num_frames ) # Circular increment counter = ( counter + 1 ) % num_frames Note Although this example uses an animated GIF as input, the same principle can be applied to static images from the web. Warning This example requires the requests library .","title":"Web"},{"location":"formats/","text":"Formats # After an image is coverted to a text_matrix , it must be formatted before it can be output. Procedure # There are steps involved in this process that are common to all formatters . Picharsso defines a [ BaseFormatter ][picharsso.format.base.BaseFormatter] that abstracts this general procedure. Initialization # This step assigns values to the parameters for the algorithms. Color # The colorize parameter controls whether the output text must include the colors from the image. Consider the following image: Instagram Here's what it should look like: colorize = False True Vectorization # The vcolor attribute is a vectorized version of the color method. Translation # The elements of the text_matrix are encoded in the Unicode standard. Depending on the output format, these characters must be translated accordingly. Source Refer to the [ translate function][picharsso.format.base.BaseFormatter.translate] for more information. Colorization # Colors are pooled from the original image by resizing it to the dimensions of the output text. This ensures that each character has a unique pixel, and thus, a unique color. With the vectorized color method, vcolor , the elements of the text_matrix are transformed into strings of text that represent the original character as well as its color. Source Refer to the [ color function][picharsso.format.base.BaseFormatter.color] for more information. Unification # Finally, the text_matrix is unified into a single string of text. This text, when viewed through a means supporting the particular format, should look like the original image. Source Refer to the [ unify function][picharsso.format.base.BaseFormatter.unify] for more information. Varities # All the following formats are implemented by a formatter which inherits from the [ BaseFormatter ][picharsso.format.base.BaseFormatter]. ANSI # The ANSI format is implemented by the [ AnsiFormater ][picharsso.format.ansi.AnsiFormatter]. HTML # The HTML format is implemented by the [ HtmlFormater ][picharsso.format.html.HtmlFormatter].","title":"Overview"},{"location":"formats/#formats","text":"After an image is coverted to a text_matrix , it must be formatted before it can be output.","title":"Formats"},{"location":"formats/#procedure","text":"There are steps involved in this process that are common to all formatters . Picharsso defines a [ BaseFormatter ][picharsso.format.base.BaseFormatter] that abstracts this general procedure.","title":"Procedure"},{"location":"formats/#initialization","text":"This step assigns values to the parameters for the algorithms.","title":"Initialization"},{"location":"formats/#color","text":"The colorize parameter controls whether the output text must include the colors from the image. Consider the following image: Instagram Here's what it should look like: colorize = False True","title":"Color"},{"location":"formats/#vectorization","text":"The vcolor attribute is a vectorized version of the color method.","title":"Vectorization"},{"location":"formats/#translation","text":"The elements of the text_matrix are encoded in the Unicode standard. Depending on the output format, these characters must be translated accordingly. Source Refer to the [ translate function][picharsso.format.base.BaseFormatter.translate] for more information.","title":"Translation"},{"location":"formats/#colorization","text":"Colors are pooled from the original image by resizing it to the dimensions of the output text. This ensures that each character has a unique pixel, and thus, a unique color. With the vectorized color method, vcolor , the elements of the text_matrix are transformed into strings of text that represent the original character as well as its color. Source Refer to the [ color function][picharsso.format.base.BaseFormatter.color] for more information.","title":"Colorization"},{"location":"formats/#unification","text":"Finally, the text_matrix is unified into a single string of text. This text, when viewed through a means supporting the particular format, should look like the original image. Source Refer to the [ unify function][picharsso.format.base.BaseFormatter.unify] for more information.","title":"Unification"},{"location":"formats/#varities","text":"All the following formats are implemented by a formatter which inherits from the [ BaseFormatter ][picharsso.format.base.BaseFormatter].","title":"Varities"},{"location":"formats/#ansi","text":"The ANSI format is implemented by the [ AnsiFormater ][picharsso.format.ansi.AnsiFormatter].","title":"ANSI"},{"location":"formats/#html","text":"The HTML format is implemented by the [ HtmlFormater ][picharsso.format.html.HtmlFormatter].","title":"HTML"},{"location":"formats/ansi/","text":"ANSI # This format supports ANSI Escape Codes . Default Since it can be used to create plain text documents , this format is chosen as the default . Procedure # This format is implemented by the [ AnsiFormatter ][picharsso.format.ansi.AnsiFormatter]. Formatting Refer to the procedure outlined in the Formats documentation for an overview of the steps common to all formats . Translation # This format doesn't require any translation. Source Refer to the [ translate function][picharsso.format.ansi.AnsiFormatter.translate] for more information. Colorization # Using the sty Python library , color is applied to the elements of the text_matrix . Source Refer to the [ color function][picharsso.format.ansi.AnsiFormatter.color] for more information. Unification # Elements of each row of the text_matrix are joined to form lines, which are further joined to form one huge string of text. Source Refer to the [ unify function][picharsso.format.ansi.AnsiFormatter.unify] for more information.","title":"ANSI"},{"location":"formats/ansi/#ansi","text":"This format supports ANSI Escape Codes . Default Since it can be used to create plain text documents , this format is chosen as the default .","title":"ANSI"},{"location":"formats/ansi/#procedure","text":"This format is implemented by the [ AnsiFormatter ][picharsso.format.ansi.AnsiFormatter]. Formatting Refer to the procedure outlined in the Formats documentation for an overview of the steps common to all formats .","title":"Procedure"},{"location":"formats/ansi/#translation","text":"This format doesn't require any translation. Source Refer to the [ translate function][picharsso.format.ansi.AnsiFormatter.translate] for more information.","title":"Translation"},{"location":"formats/ansi/#colorization","text":"Using the sty Python library , color is applied to the elements of the text_matrix . Source Refer to the [ color function][picharsso.format.ansi.AnsiFormatter.color] for more information.","title":"Colorization"},{"location":"formats/ansi/#unification","text":"Elements of each row of the text_matrix are joined to form lines, which are further joined to form one huge string of text. Source Refer to the [ unify function][picharsso.format.ansi.AnsiFormatter.unify] for more information.","title":"Unification"},{"location":"formats/html/","text":"HTML # This format supports HTML . Procedure # This format is implemented by the [ HtmlFormatter ][picharsso.format.html.HtmlFormatter]. Formatting Refer to the procedure outlined in the Formats documentation for an overview of the steps common to all formats . Translation # This format requires some characters to be translated to their equivalent HTML character entities . Source Refer to the [ translate function][picharsso.format.html.HtmlFormatter.translate] for more information. Colorization # Color is applied to each element in the text_matrix by wrapping it in a styled <span> element. Source Refer to the [ color function][picharsso.format.html.HtmlFormatter.color] for more information. Unification # Elements of each row of the text_matrix are joined to form lines. All lines are wrapped in a <div> elemen each. The entire text output is wrapped in a <div> element. Source Refer to the [ unify function][picharsso.format.html.HtmlFormatter.unify] for more information.","title":"HTML"},{"location":"formats/html/#html","text":"This format supports HTML .","title":"HTML"},{"location":"formats/html/#procedure","text":"This format is implemented by the [ HtmlFormatter ][picharsso.format.html.HtmlFormatter]. Formatting Refer to the procedure outlined in the Formats documentation for an overview of the steps common to all formats .","title":"Procedure"},{"location":"formats/html/#translation","text":"This format requires some characters to be translated to their equivalent HTML character entities . Source Refer to the [ translate function][picharsso.format.html.HtmlFormatter.translate] for more information.","title":"Translation"},{"location":"formats/html/#colorization","text":"Color is applied to each element in the text_matrix by wrapping it in a styled <span> element. Source Refer to the [ color function][picharsso.format.html.HtmlFormatter.color] for more information.","title":"Colorization"},{"location":"formats/html/#unification","text":"Elements of each row of the text_matrix are joined to form lines. All lines are wrapped in a <div> elemen each. The entire text output is wrapped in a <div> element. Source Refer to the [ unify function][picharsso.format.html.HtmlFormatter.unify] for more information.","title":"Unification"},{"location":"library/meta/","text":"meta # This module defines variables for the package metadata. AUTHOR: str # The package author. DESCRIPTION: str # The package description. DOCS_URL: str # The URL of the package documentation. LICENSE: str # The package license. NAME: str # The package name. REPO_URL: str # The URL of the package source code. VERSION: str # The current package version.","title":"meta"},{"location":"library/meta/#meta","text":"This module defines variables for the package metadata.","title":"meta"},{"location":"library/meta/#picharsso.meta.AUTHOR","text":"The package author.","title":"AUTHOR"},{"location":"library/meta/#picharsso.meta.DESCRIPTION","text":"The package description.","title":"DESCRIPTION"},{"location":"library/meta/#picharsso.meta.DOCS_URL","text":"The URL of the package documentation.","title":"DOCS_URL"},{"location":"library/meta/#picharsso.meta.LICENSE","text":"The package license.","title":"LICENSE"},{"location":"library/meta/#picharsso.meta.NAME","text":"The package name.","title":"NAME"},{"location":"library/meta/#picharsso.meta.REPO_URL","text":"The URL of the package source code.","title":"REPO_URL"},{"location":"library/meta/#picharsso.meta.VERSION","text":"The current package version.","title":"VERSION"},{"location":"library/utils/","text":"utils # This module defines utility functions that are used across the package. clear_screen () # Clears the terminal console. Source code in picharsso/utils.py 11 12 13 14 15 16 17 18 def clear_screen (): \"\"\"Clears the terminal console.\"\"\" # Windows systems if name == \"nt\" : _ = system ( \"cls\" ) # Unix systems else : _ = system ( \"clear\" ) embolden ( text ) # Modifies text to appear in a bold typeface, using ANSI escape codes . Parameters: Name Type Description Default text str The subject text. required Returns: Type Description str The text in a bold typeface. Source code in picharsso/utils.py 21 22 23 24 25 26 27 28 29 30 31 def embolden ( text ): \"\"\"Modifies text to appear in a bold typeface, using [ANSI escape codes](https://en.wikipedia.org/wiki/ANSI_escape_code). Args: text (str): The subject text. Returns: str: The text in a bold typeface. \"\"\" return f \" { ef . bold }{ text }{ rs . bold_dim } \" ensure_rgb ( image ) # Usually converts any Pillow image to its equivalent in the RGB mode. Parameters: Name Type Description Default image PIL.Image.Image The subject image. required Returns: Type Description PIL.Image.Image The image in the RGB mode. Source code in picharsso/utils.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def ensure_rgb ( image ): \"\"\"Usually converts any [Pillow](https://python-pillow.org/) `image` to its equivalent in the `RGB` mode. Args: image (PIL.Image.Image): The subject image. Returns: PIL.Image.Image: The image in the `RGB` mode. \"\"\" # If the image has a color palette, # convert to the `RGBA` mode. if image . mode == \"P\" : image = image . convert ( \"RGBA\" ) # If the image is in `RGBA` mode, # create a white background. if image . mode == \"RGBA\" : temp = Image . new ( \"RGB\" , image . size , ( 255 , 255 , 255 )) temp . paste ( image , mask = image . split ()[ 3 ]) image = temp # Convert to `RGB` mode return image . convert ( \"RGB\" ) italicize ( text ) # Modifies text to appear in italics, using ANSI escape codes . Parameters: Name Type Description Default text str The subject text. required Returns: Type Description str The text in italics. Source code in picharsso/utils.py 60 61 62 63 64 65 66 67 68 69 70 def italicize ( text ): \"\"\"Modifies text to appear in italics, using [ANSI escape codes](https://en.wikipedia.org/wiki/ANSI_escape_code). Args: text (str): The subject text. Returns: str: The text in italics. \"\"\" return f \" { ef . italic }{ text }{ rs . italic } \" submatrices ( matrix , shape ) # Returns a rolling window view of a matrix , without overlapping, given the shape of the window. Parameters: Name Type Description Default matrix numpy.ndarray The subject matrix. required shape Tuple[int, int] The <height> and <width> of the window. required Returns: Type Description numpy.ndarray The rolling window view of the matrix. Note This operation doesn't account for the loss of border elements. Source code in picharsso/utils.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def submatrices ( matrix , shape ): \"\"\"Returns a rolling window view of a `matrix`, without overlapping, given the `shape` of the window. Args: matrix (numpy.ndarray): The subject matrix. shape (Tuple[int, int]): The `<height>` and `<width>` of the window. Returns: numpy.ndarray: The rolling window view of the matrix. Note: This operation doesn't account for the loss of border elements. \"\"\" # Extract strides and shapes for calculation. mat_hs , mat_ws = matrix . strides [: 2 ] mat_h , mat_w = matrix . shape [: 2 ] ker_h , ker_w = shape # View `matrix` according to new strides and shape. return np . lib . stride_tricks . as_strided ( matrix , ( 1 + ( mat_h - ker_h ) // ker_h , 1 + ( mat_w - ker_w ) // ker_w , ker_h , ker_w ) + matrix . shape [ 2 :], strides = ( ker_h * mat_hs , ker_w * mat_ws , mat_hs , mat_ws ) + matrix . strides [ 2 :], ) terminal_size () # Returns the size of the terminal window. Returns: Type Description (Tuple[int, int]) The <height> and <width> of the terminal window in characters. Note When used while piping, this function usually returns the default terminal size, (24, 80) . Source code in picharsso/utils.py 101 102 103 104 105 106 107 108 109 110 111 112 def terminal_size (): \"\"\"Returns the size of the terminal window. Returns: (Tuple[int, int]): The `<height>` and `<width>` of the terminal window in characters. Note: When used while piping, this function usually returns the default terminal size, `(24, 80)`. \"\"\" return shutil . get_terminal_size ()[:: - 1 ]","title":"utils"},{"location":"library/utils/#utils","text":"This module defines utility functions that are used across the package.","title":"utils"},{"location":"library/utils/#picharsso.utils.clear_screen","text":"Clears the terminal console. Source code in picharsso/utils.py 11 12 13 14 15 16 17 18 def clear_screen (): \"\"\"Clears the terminal console.\"\"\" # Windows systems if name == \"nt\" : _ = system ( \"cls\" ) # Unix systems else : _ = system ( \"clear\" )","title":"clear_screen()"},{"location":"library/utils/#picharsso.utils.embolden","text":"Modifies text to appear in a bold typeface, using ANSI escape codes . Parameters: Name Type Description Default text str The subject text. required Returns: Type Description str The text in a bold typeface. Source code in picharsso/utils.py 21 22 23 24 25 26 27 28 29 30 31 def embolden ( text ): \"\"\"Modifies text to appear in a bold typeface, using [ANSI escape codes](https://en.wikipedia.org/wiki/ANSI_escape_code). Args: text (str): The subject text. Returns: str: The text in a bold typeface. \"\"\" return f \" { ef . bold }{ text }{ rs . bold_dim } \"","title":"embolden()"},{"location":"library/utils/#picharsso.utils.ensure_rgb","text":"Usually converts any Pillow image to its equivalent in the RGB mode. Parameters: Name Type Description Default image PIL.Image.Image The subject image. required Returns: Type Description PIL.Image.Image The image in the RGB mode. Source code in picharsso/utils.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def ensure_rgb ( image ): \"\"\"Usually converts any [Pillow](https://python-pillow.org/) `image` to its equivalent in the `RGB` mode. Args: image (PIL.Image.Image): The subject image. Returns: PIL.Image.Image: The image in the `RGB` mode. \"\"\" # If the image has a color palette, # convert to the `RGBA` mode. if image . mode == \"P\" : image = image . convert ( \"RGBA\" ) # If the image is in `RGBA` mode, # create a white background. if image . mode == \"RGBA\" : temp = Image . new ( \"RGB\" , image . size , ( 255 , 255 , 255 )) temp . paste ( image , mask = image . split ()[ 3 ]) image = temp # Convert to `RGB` mode return image . convert ( \"RGB\" )","title":"ensure_rgb()"},{"location":"library/utils/#picharsso.utils.italicize","text":"Modifies text to appear in italics, using ANSI escape codes . Parameters: Name Type Description Default text str The subject text. required Returns: Type Description str The text in italics. Source code in picharsso/utils.py 60 61 62 63 64 65 66 67 68 69 70 def italicize ( text ): \"\"\"Modifies text to appear in italics, using [ANSI escape codes](https://en.wikipedia.org/wiki/ANSI_escape_code). Args: text (str): The subject text. Returns: str: The text in italics. \"\"\" return f \" { ef . italic }{ text }{ rs . italic } \"","title":"italicize()"},{"location":"library/utils/#picharsso.utils.submatrices","text":"Returns a rolling window view of a matrix , without overlapping, given the shape of the window. Parameters: Name Type Description Default matrix numpy.ndarray The subject matrix. required shape Tuple[int, int] The <height> and <width> of the window. required Returns: Type Description numpy.ndarray The rolling window view of the matrix. Note This operation doesn't account for the loss of border elements. Source code in picharsso/utils.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def submatrices ( matrix , shape ): \"\"\"Returns a rolling window view of a `matrix`, without overlapping, given the `shape` of the window. Args: matrix (numpy.ndarray): The subject matrix. shape (Tuple[int, int]): The `<height>` and `<width>` of the window. Returns: numpy.ndarray: The rolling window view of the matrix. Note: This operation doesn't account for the loss of border elements. \"\"\" # Extract strides and shapes for calculation. mat_hs , mat_ws = matrix . strides [: 2 ] mat_h , mat_w = matrix . shape [: 2 ] ker_h , ker_w = shape # View `matrix` according to new strides and shape. return np . lib . stride_tricks . as_strided ( matrix , ( 1 + ( mat_h - ker_h ) // ker_h , 1 + ( mat_w - ker_w ) // ker_w , ker_h , ker_w ) + matrix . shape [ 2 :], strides = ( ker_h * mat_hs , ker_w * mat_ws , mat_hs , mat_ws ) + matrix . strides [ 2 :], )","title":"submatrices()"},{"location":"library/utils/#picharsso.utils.terminal_size","text":"Returns the size of the terminal window. Returns: Type Description (Tuple[int, int]) The <height> and <width> of the terminal window in characters. Note When used while piping, this function usually returns the default terminal size, (24, 80) . Source code in picharsso/utils.py 101 102 103 104 105 106 107 108 109 110 111 112 def terminal_size (): \"\"\"Returns the size of the terminal window. Returns: (Tuple[int, int]): The `<height>` and `<width>` of the terminal window in characters. Note: When used while piping, this function usually returns the default terminal size, `(24, 80)`. \"\"\" return shutil . get_terminal_size ()[:: - 1 ]","title":"terminal_size()"},{"location":"library/draw/","text":"draw # This package defines drawers for different styles of text art. Styles Refer to the Styles documentation for an in-depth guide to the image processing behind Picharsso . DRAWERS: dict # The collection of drawers. new_drawer ( style , ** kwargs ) # Creates a new drawer instance. Parameters: Name Type Description Default style str The style of the text art. required **kwargs dict Appropriate keyword arguments. See [ BaseDrawer ][picharsso.draw.base.BaseDrawer] and others. {} Returns: Type Description Type[picharsso.draw.BaseDrawer] The new drawer instance. Source code in picharsso/draw/__init__.py 17 18 19 20 21 22 23 24 25 26 27 28 29 def new_drawer ( style , ** kwargs ): \"\"\"Creates a new drawer instance. Args: style (str): The style of the text art. **kwargs (dict): Appropriate keyword arguments. See [`BaseDrawer`][picharsso.draw.base.BaseDrawer] and others. Returns: Type[picharsso.draw.BaseDrawer]: The new drawer instance. \"\"\" return DRAWERS [ style ]( ** kwargs )","title":"__init__"},{"location":"library/draw/#draw","text":"This package defines drawers for different styles of text art. Styles Refer to the Styles documentation for an in-depth guide to the image processing behind Picharsso .","title":"draw"},{"location":"library/draw/#picharsso.draw.__init__.DRAWERS","text":"The collection of drawers.","title":"DRAWERS"},{"location":"library/draw/#picharsso.draw.__init__.new_drawer","text":"Creates a new drawer instance. Parameters: Name Type Description Default style str The style of the text art. required **kwargs dict Appropriate keyword arguments. See [ BaseDrawer ][picharsso.draw.base.BaseDrawer] and others. {} Returns: Type Description Type[picharsso.draw.BaseDrawer] The new drawer instance. Source code in picharsso/draw/__init__.py 17 18 19 20 21 22 23 24 25 26 27 28 29 def new_drawer ( style , ** kwargs ): \"\"\"Creates a new drawer instance. Args: style (str): The style of the text art. **kwargs (dict): Appropriate keyword arguments. See [`BaseDrawer`][picharsso.draw.base.BaseDrawer] and others. Returns: Type[picharsso.draw.BaseDrawer]: The new drawer instance. \"\"\" return DRAWERS [ style ]( ** kwargs )","title":"new_drawer()"},{"location":"library/draw/base/","text":"base # This module defines an abstract base drawer. Styles Refer to the Styles documentation for an in-depth guide to the image processing behind Picharsso . DEFAULT_RESAMPLING: str # The default resampling filter. RESAMPLING_FILTERS: dict # A collection of resampling filters. See Pillow's Filters . BaseDrawer # An abstract base drawer. Attributes: Name Type Description height int The desired height of the text in characters. width int The desired width of the text in characters. resample int The resampling filter. format Type[picharsso.format.BaseFormatter] The formatter instance. Note The following methods must be overwritten: [ calculate_size ][picharsso.draw.base.BaseDrawer.calculate_size] [ process ][picharsso.draw.base.BaseDrawer.process] __call__ ( self , image ) special # Applies processing and formatting on the image and returns a single string. Parameters: Name Type Description Default image PIL.Image.Image The subject image. required Returns: Type Description str The string of text art. Source code in picharsso/draw/base.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def __call__ ( self , image ): \"\"\"Applies processing and formatting on the `image` and returns a single string. Args: image (PIL.Image.Image): The subject image. Returns: str: The string of text art. \"\"\" # Ensure that the image is in the `RGB` mode. image = ensure_rgb ( image ) # Calculate the new size of the image, for processing the text matrix. image_size = self . calculate_size ( image . size [:: - 1 ]) # Process text matrix from the resized image. text_matrix = self . process ( image . resize ( image_size [:: - 1 ], resample = self . resample ) ) # Apply formatting. return self . format ( text_matrix , image , self . resample ) __init__ ( self , height = 42 , width = 0 , resample = 'nearest' , ** kwargs ) special # Initialization method. Parameters: Name Type Description Default height Optional[int] The desired height of the text in characters. 42 width Optional[int] The desired width of the text in characters. 0 resample Optional[str] The resampling filter. 'nearest' **kwargs dict Appropriate keyword arguments. See [ BaseFormatter ][picharsso.format.base.BaseFormatter] and others. {} Note When set as 0 , height is derived from width and vice versa. This is done to preserve the aspect ratio of the image. Source code in picharsso/draw/base.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def __init__ ( self , height = 42 , width = 0 , resample = DEFAULT_RESAMPLING , ** kwargs ): \"\"\"Initialization method. Args: height (Optional[int]): The desired height of the text in characters. width (Optional[int]): The desired width of the text in characters. resample (Optional[str]): The resampling filter. **kwargs (dict): Appropriate keyword arguments. See [`BaseFormatter`][picharsso.format.base.BaseFormatter] and others. Note: When set as `0`, `height` is derived from `width` and vice versa. This is done to preserve the aspect ratio of the image. \"\"\" self . height = None self . width = None self . resample = None BaseDrawer . set ( self , height = height , width = width , resample = resample ) self . format = new_formatter ( ** kwargs ) calculate_size ( self , image_size ) # Calculates the size of the image for processing the text matrix. Parameters: Name Type Description Default image_size Tuple[int, int] The height and width of the subject image. required Returns: Type Description Tuple[int, int] The size of the image. Source code in picharsso/draw/base.py 94 95 96 97 98 99 100 101 102 103 @abstractmethod def calculate_size ( self , image_size ): \"\"\"Calculates the size of the image for processing the text matrix. Args: image_size (Tuple[int, int]): The height and width of the subject image. Returns: Tuple[int, int]: The size of the image. \"\"\" process ( self , image ) # Converts an image to a matrix of text. Parameters: Name Type Description Default image PIL.Image.Image The subject image, with mode = \"RGB\" , and size = (<height>, <width>) . required Returns: Type Description numpy.ndarray The text matrix, with shape = (<height>, <width>) , and dtype = str . Source code in picharsso/draw/base.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 @abstractmethod def process ( self , image ): \"\"\"Converts an image to a matrix of text. Args: image (PIL.Image.Image): The subject image, with `mode = \"RGB\"`, and `size = (<height>, <width>)`. Returns: numpy.ndarray: The text matrix, with `shape = (<height>, <width>)`, and `dtype = str`. \"\"\" set ( self , height = None , width = None , resample = None ) # Sets attributes of the drawer instance. Parameters: Name Type Description Default height Option[int] Sets height . None width Option[int] Sets width . None resample Option[str] Sets resample . None Exceptions: Type Description ValueError If both height and width are set to 0 . Source code in picharsso/draw/base.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 def set ( self , height = None , width = None , resample = None ): \"\"\"Sets attributes of the drawer instance. Args: height (Option[int]): Sets `height`. width (Option[int]): Sets `width`. resample (Option[str]): Sets `resample`. Raises: ValueError: If both `height` and `width` are set to `0`. \"\"\" # Set resampling filter if resample is not None : self . resample = RESAMPLING_FILTERS [ resample ] # Set height and width if height is not None or width is not None : new_h = self . height if height is None else height new_w = self . width if width is None else width if new_h == 0 and new_w == 0 : raise ValueError ( \"Either height or width must be non-zero\" ) self . height = new_h self . width = new_w","title":"base"},{"location":"library/draw/base/#base","text":"This module defines an abstract base drawer. Styles Refer to the Styles documentation for an in-depth guide to the image processing behind Picharsso .","title":"base"},{"location":"library/draw/base/#picharsso.draw.base.DEFAULT_RESAMPLING","text":"The default resampling filter.","title":"DEFAULT_RESAMPLING"},{"location":"library/draw/base/#picharsso.draw.base.RESAMPLING_FILTERS","text":"A collection of resampling filters. See Pillow's Filters .","title":"RESAMPLING_FILTERS"},{"location":"library/draw/base/#picharsso.draw.base.BaseDrawer","text":"An abstract base drawer. Attributes: Name Type Description height int The desired height of the text in characters. width int The desired width of the text in characters. resample int The resampling filter. format Type[picharsso.format.BaseFormatter] The formatter instance. Note The following methods must be overwritten: [ calculate_size ][picharsso.draw.base.BaseDrawer.calculate_size] [ process ][picharsso.draw.base.BaseDrawer.process]","title":"BaseDrawer"},{"location":"library/draw/base/#picharsso.draw.base.BaseDrawer.__call__","text":"Applies processing and formatting on the image and returns a single string. Parameters: Name Type Description Default image PIL.Image.Image The subject image. required Returns: Type Description str The string of text art. Source code in picharsso/draw/base.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def __call__ ( self , image ): \"\"\"Applies processing and formatting on the `image` and returns a single string. Args: image (PIL.Image.Image): The subject image. Returns: str: The string of text art. \"\"\" # Ensure that the image is in the `RGB` mode. image = ensure_rgb ( image ) # Calculate the new size of the image, for processing the text matrix. image_size = self . calculate_size ( image . size [:: - 1 ]) # Process text matrix from the resized image. text_matrix = self . process ( image . resize ( image_size [:: - 1 ], resample = self . resample ) ) # Apply formatting. return self . format ( text_matrix , image , self . resample )","title":"__call__()"},{"location":"library/draw/base/#picharsso.draw.base.BaseDrawer.__init__","text":"Initialization method. Parameters: Name Type Description Default height Optional[int] The desired height of the text in characters. 42 width Optional[int] The desired width of the text in characters. 0 resample Optional[str] The resampling filter. 'nearest' **kwargs dict Appropriate keyword arguments. See [ BaseFormatter ][picharsso.format.base.BaseFormatter] and others. {} Note When set as 0 , height is derived from width and vice versa. This is done to preserve the aspect ratio of the image. Source code in picharsso/draw/base.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def __init__ ( self , height = 42 , width = 0 , resample = DEFAULT_RESAMPLING , ** kwargs ): \"\"\"Initialization method. Args: height (Optional[int]): The desired height of the text in characters. width (Optional[int]): The desired width of the text in characters. resample (Optional[str]): The resampling filter. **kwargs (dict): Appropriate keyword arguments. See [`BaseFormatter`][picharsso.format.base.BaseFormatter] and others. Note: When set as `0`, `height` is derived from `width` and vice versa. This is done to preserve the aspect ratio of the image. \"\"\" self . height = None self . width = None self . resample = None BaseDrawer . set ( self , height = height , width = width , resample = resample ) self . format = new_formatter ( ** kwargs )","title":"__init__()"},{"location":"library/draw/base/#picharsso.draw.base.BaseDrawer.calculate_size","text":"Calculates the size of the image for processing the text matrix. Parameters: Name Type Description Default image_size Tuple[int, int] The height and width of the subject image. required Returns: Type Description Tuple[int, int] The size of the image. Source code in picharsso/draw/base.py 94 95 96 97 98 99 100 101 102 103 @abstractmethod def calculate_size ( self , image_size ): \"\"\"Calculates the size of the image for processing the text matrix. Args: image_size (Tuple[int, int]): The height and width of the subject image. Returns: Tuple[int, int]: The size of the image. \"\"\"","title":"calculate_size()"},{"location":"library/draw/base/#picharsso.draw.base.BaseDrawer.process","text":"Converts an image to a matrix of text. Parameters: Name Type Description Default image PIL.Image.Image The subject image, with mode = \"RGB\" , and size = (<height>, <width>) . required Returns: Type Description numpy.ndarray The text matrix, with shape = (<height>, <width>) , and dtype = str . Source code in picharsso/draw/base.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 @abstractmethod def process ( self , image ): \"\"\"Converts an image to a matrix of text. Args: image (PIL.Image.Image): The subject image, with `mode = \"RGB\"`, and `size = (<height>, <width>)`. Returns: numpy.ndarray: The text matrix, with `shape = (<height>, <width>)`, and `dtype = str`. \"\"\"","title":"process()"},{"location":"library/draw/base/#picharsso.draw.base.BaseDrawer.set","text":"Sets attributes of the drawer instance. Parameters: Name Type Description Default height Option[int] Sets height . None width Option[int] Sets width . None resample Option[str] Sets resample . None Exceptions: Type Description ValueError If both height and width are set to 0 . Source code in picharsso/draw/base.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 def set ( self , height = None , width = None , resample = None ): \"\"\"Sets attributes of the drawer instance. Args: height (Option[int]): Sets `height`. width (Option[int]): Sets `width`. resample (Option[str]): Sets `resample`. Raises: ValueError: If both `height` and `width` are set to `0`. \"\"\" # Set resampling filter if resample is not None : self . resample = RESAMPLING_FILTERS [ resample ] # Set height and width if height is not None or width is not None : new_h = self . height if height is None else height new_w = self . width if width is None else width if new_h == 0 and new_w == 0 : raise ValueError ( \"Either height or width must be non-zero\" ) self . height = new_h self . width = new_w","title":"set()"},{"location":"library/draw/braille/","text":"braille # This module defines a drawer for the Braille style . Example Consider the following image: Apple Computer [Rob Janoff, 1977] Here's what it should look like: DEFAULT_THRESHOLD: int # The default threshold grayscale intensity. BrailleDrawer # A drawer for the Braille style . Inherits [ BaseDrawer ][picharsso.draw.base.BaseDrawer]. Attributes: Name Type Description threshold int Threshold grayscale intensity for pixels to be considered. kernel numpy.ndarray A hard-coded matrix relating the intensity to the Unicode values for Braille characters. charset_array numpy.ndarray A matrix of all Braille characters, indexed by their offsetted Unicode value. __init__ ( self , threshold = 64 , ** kwargs ) special # Initialization method. Parameters: Name Type Description Default threshold Optional[int] Threshold grayscale intensity for pixels to be considered. 64 Source code in picharsso/draw/braille.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def __init__ ( self , threshold = DEFAULT_THRESHOLD , ** kwargs ): \"\"\"Initialization method. Args: threshold (Optional[int]): Threshold grayscale intensity for pixels to be considered. \"\"\" super () . __init__ ( ** kwargs ) self . threshold = None self . set ( threshold = threshold ) self . kernel = np . array ([[ 1 , 8 ], [ 2 , 16 ], [ 4 , 32 ], [ 64 , 128 ]]) . astype ( np . uint8 ) self . charset_array = np . array ([ chr ( ord ( \" \\u2800 \" ) + x ) for x in range ( 256 )]) calculate_size ( self , image_size ) # Calculates the size of the image for processing the text matrix. Parameters: Name Type Description Default image_size Tuple[int, int] The height and width of the subject image. required Returns: Type Description Tuple[int, int] The size of the image. Source code in picharsso/draw/braille.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 def calculate_size ( self , image_size ): # Possible dimensions new_h = self . height new_w = self . width new_h = new_h * 4 new_w = new_w * 2 # Image dimensions old_h , old_w = image_size # If height is not set, infer it from width if not new_h : new_h = int ( round ( old_h / old_w * new_w )) # If width is not set, infer it from height if not new_w : new_w = int ( round ( old_w / old_h * new_h )) return new_h , new_w process ( self , image ) # Converts an image to a matrix of text. Parameters: Name Type Description Default image PIL.Image.Image The subject image, with mode = \"RGB\" , and size = (<height>, <width>) . required Returns: Type Description numpy.ndarray The text matrix, with shape = (<height>, <width>) , and dtype = str . Source code in picharsso/draw/braille.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 def process ( self , image ): # Convert the image mode to grayscale. # Filter all pixels with intensity greater than or equal to the threshold. # Perform a convolution on this filtered image with the Braille kernel. # The resultant matrix has the offsetted Unicode values, i.e., indices # for the corresponding Braille characters that form the image. # Index the character set with the indices. return self . charset_array [ np . einsum ( \"ij,klij->kl\" , self . kernel , submatrices ( ( np . array ( image . convert ( \"L\" )) >= self . threshold ) . astype ( np . uint8 ), self . kernel . shape , ), ) ] set ( self , threshold = None , ** kwargs ) # Sets attributes of the drawer instance. Parameters: Name Type Description Default threshold Optional[int] Sets threshold . None **kwargs dict Appropriate keyword arguments. See [ BaseDrawer.set ][picharsso.draw.base.BaseDrawer.set]. {} Source code in picharsso/draw/braille.py 103 104 105 106 107 108 109 110 111 112 113 114 def set ( self , threshold = None , ** kwargs ): \"\"\"Sets attributes of the drawer instance. Args: threshold (Optional[int]): Sets `threshold`. **kwargs (dict): Appropriate keyword arguments. See [`BaseDrawer.set`][picharsso.draw.base.BaseDrawer.set]. \"\"\" super () . set ( ** kwargs ) if threshold is not None : self . threshold = threshold","title":"braille"},{"location":"library/draw/braille/#braille","text":"This module defines a drawer for the Braille style . Example Consider the following image: Apple Computer [Rob Janoff, 1977] Here's what it should look like:","title":"braille"},{"location":"library/draw/braille/#picharsso.draw.braille.DEFAULT_THRESHOLD","text":"The default threshold grayscale intensity.","title":"DEFAULT_THRESHOLD"},{"location":"library/draw/braille/#picharsso.draw.braille.BrailleDrawer","text":"A drawer for the Braille style . Inherits [ BaseDrawer ][picharsso.draw.base.BaseDrawer]. Attributes: Name Type Description threshold int Threshold grayscale intensity for pixels to be considered. kernel numpy.ndarray A hard-coded matrix relating the intensity to the Unicode values for Braille characters. charset_array numpy.ndarray A matrix of all Braille characters, indexed by their offsetted Unicode value.","title":"BrailleDrawer"},{"location":"library/draw/braille/#picharsso.draw.braille.BrailleDrawer.__init__","text":"Initialization method. Parameters: Name Type Description Default threshold Optional[int] Threshold grayscale intensity for pixels to be considered. 64 Source code in picharsso/draw/braille.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def __init__ ( self , threshold = DEFAULT_THRESHOLD , ** kwargs ): \"\"\"Initialization method. Args: threshold (Optional[int]): Threshold grayscale intensity for pixels to be considered. \"\"\" super () . __init__ ( ** kwargs ) self . threshold = None self . set ( threshold = threshold ) self . kernel = np . array ([[ 1 , 8 ], [ 2 , 16 ], [ 4 , 32 ], [ 64 , 128 ]]) . astype ( np . uint8 ) self . charset_array = np . array ([ chr ( ord ( \" \\u2800 \" ) + x ) for x in range ( 256 )])","title":"__init__()"},{"location":"library/draw/braille/#picharsso.draw.braille.BrailleDrawer.calculate_size","text":"Calculates the size of the image for processing the text matrix. Parameters: Name Type Description Default image_size Tuple[int, int] The height and width of the subject image. required Returns: Type Description Tuple[int, int] The size of the image. Source code in picharsso/draw/braille.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 def calculate_size ( self , image_size ): # Possible dimensions new_h = self . height new_w = self . width new_h = new_h * 4 new_w = new_w * 2 # Image dimensions old_h , old_w = image_size # If height is not set, infer it from width if not new_h : new_h = int ( round ( old_h / old_w * new_w )) # If width is not set, infer it from height if not new_w : new_w = int ( round ( old_w / old_h * new_h )) return new_h , new_w","title":"calculate_size()"},{"location":"library/draw/braille/#picharsso.draw.braille.BrailleDrawer.process","text":"Converts an image to a matrix of text. Parameters: Name Type Description Default image PIL.Image.Image The subject image, with mode = \"RGB\" , and size = (<height>, <width>) . required Returns: Type Description numpy.ndarray The text matrix, with shape = (<height>, <width>) , and dtype = str . Source code in picharsso/draw/braille.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 def process ( self , image ): # Convert the image mode to grayscale. # Filter all pixels with intensity greater than or equal to the threshold. # Perform a convolution on this filtered image with the Braille kernel. # The resultant matrix has the offsetted Unicode values, i.e., indices # for the corresponding Braille characters that form the image. # Index the character set with the indices. return self . charset_array [ np . einsum ( \"ij,klij->kl\" , self . kernel , submatrices ( ( np . array ( image . convert ( \"L\" )) >= self . threshold ) . astype ( np . uint8 ), self . kernel . shape , ), ) ]","title":"process()"},{"location":"library/draw/braille/#picharsso.draw.braille.BrailleDrawer.set","text":"Sets attributes of the drawer instance. Parameters: Name Type Description Default threshold Optional[int] Sets threshold . None **kwargs dict Appropriate keyword arguments. See [ BaseDrawer.set ][picharsso.draw.base.BaseDrawer.set]. {} Source code in picharsso/draw/braille.py 103 104 105 106 107 108 109 110 111 112 113 114 def set ( self , threshold = None , ** kwargs ): \"\"\"Sets attributes of the drawer instance. Args: threshold (Optional[int]): Sets `threshold`. **kwargs (dict): Appropriate keyword arguments. See [`BaseDrawer.set`][picharsso.draw.base.BaseDrawer.set]. \"\"\" super () . set ( ** kwargs ) if threshold is not None : self . threshold = threshold","title":"set()"},{"location":"library/draw/gradient/","text":"gradient # This module defines a drawer for the gradient style . Example Consider the following image: Apple Computer [Rob Janoff, 1977] Here's what it should look like: DEFAULT_CHARSET: str # The default character set. GradientDrawer # A drawer for the gradient style . Inherits [ BaseDrawer ][picharsso.draw.base.BaseDrawer]. Attributes: Name Type Description charset str A set of characters ordered by the amount of area their symbols occupy. negative bool Whether or not to reverse the charset . charset_array numpy.ndarray A vectorized version of the charset . __init__ ( self , charset = ' :!?PG@' , negative = False , ** kwargs ) special # Initialization method. Parameters: Name Type Description Default charset Optional[str] A set of characters ordered by the amount of area their symbols occupy. Defaults to DEFAULT_CHARSET ' :!?PG@' negative Optional[bool] Whether or not to reverse the charset . False **kwargs dict Appropriate keyword arguments. See [ BaseDrawer ][picharsso.draw.base.BaseDrawer]. {} Source code in picharsso/draw/gradient.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def __init__ ( self , charset = DEFAULT_CHARSET , negative = False , ** kwargs ): \"\"\"Initialization method. Args: charset (Optional[str]): A set of characters ordered by the amount of area their symbols occupy. Defaults to `DEFAULT_CHARSET` negative (Optional[bool]): Whether or not to reverse the `charset`. **kwargs (dict): Appropriate keyword arguments. See [`BaseDrawer`][picharsso.draw.base.BaseDrawer]. \"\"\" super () . __init__ ( ** kwargs ) self . charset = None self . negative = None self . charset_array = None self . set ( charset = charset , negative = negative ) calculate_size ( self , image_size ) # Calculates the size of the image for processing the text matrix. Parameters: Name Type Description Default image_size Tuple[int, int] The height and width of the subject image. required Returns: Type Description Tuple[int, int] The size of the image. Source code in picharsso/draw/gradient.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def calculate_size ( self , image_size ): # Possible dimensions new_h = self . height new_w = self . width # Image dimensions old_h , old_w = image_size # If height is not set, infer it from width if not new_h : new_h = int ( round ( old_h / old_w * new_w / 2.125 )) # If width is not set, infer it from height if not new_w : new_w = int ( round ( old_w / old_h * new_h * 2.125 )) return new_h , new_w process ( self , image ) # Converts an image to a matrix of text. Parameters: Name Type Description Default image PIL.Image.Image The subject image, with mode = \"RGB\" , and size = (<height>, <width>) . required Returns: Type Description numpy.ndarray The text matrix, with shape = (<height>, <width>) , and dtype = str . Source code in picharsso/draw/gradient.py 82 83 84 85 86 87 88 89 90 91 def process ( self , image ): # Convert the image mode to grayscale. # Normalize the pixel values from a range of (0, 255) to (0, len(self.charset)-1), # to obtain indices for the character set. # Index the character set array with the indices. return self . charset_array [ np . round ( np . array ( image . convert ( \"L\" )) / 255 * ( len ( self . charset ) - 1 ) ) . astype ( int ) ] set ( self , charset = None , negative = None , ** kwargs ) # Sets attributes of the drawer instance. Parameters: Name Type Description Default charset Optional[str] Sets charset . None negative Optional[bool] Sets negative . None **kwargs dict Appropriate keyword arguments. See [ BaseDrawer.set ][picharsso.draw.base.BaseDrawer.set]. {} Source code in picharsso/draw/gradient.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 def set ( self , charset = None , negative = None , ** kwargs ): \"\"\"Sets attributes of the drawer instance. Args: charset (Optional[str]): Sets `charset`. negative (Optional[bool]): Sets `negative`. **kwargs (dict): Appropriate keyword arguments. See [`BaseDrawer.set`][picharsso.draw.base.BaseDrawer.set]. \"\"\" super () . set ( ** kwargs ) if charset is not None : self . charset = charset if negative is not None : self . negative = negative self . charset_array = np . array ( list ( self . charset if not self . negative else self . charset [:: - 1 ]) )","title":"gradient"},{"location":"library/draw/gradient/#gradient","text":"This module defines a drawer for the gradient style . Example Consider the following image: Apple Computer [Rob Janoff, 1977] Here's what it should look like:","title":"gradient"},{"location":"library/draw/gradient/#picharsso.draw.gradient.DEFAULT_CHARSET","text":"The default character set.","title":"DEFAULT_CHARSET"},{"location":"library/draw/gradient/#picharsso.draw.gradient.GradientDrawer","text":"A drawer for the gradient style . Inherits [ BaseDrawer ][picharsso.draw.base.BaseDrawer]. Attributes: Name Type Description charset str A set of characters ordered by the amount of area their symbols occupy. negative bool Whether or not to reverse the charset . charset_array numpy.ndarray A vectorized version of the charset .","title":"GradientDrawer"},{"location":"library/draw/gradient/#picharsso.draw.gradient.GradientDrawer.__init__","text":"Initialization method. Parameters: Name Type Description Default charset Optional[str] A set of characters ordered by the amount of area their symbols occupy. Defaults to DEFAULT_CHARSET ' :!?PG@' negative Optional[bool] Whether or not to reverse the charset . False **kwargs dict Appropriate keyword arguments. See [ BaseDrawer ][picharsso.draw.base.BaseDrawer]. {} Source code in picharsso/draw/gradient.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def __init__ ( self , charset = DEFAULT_CHARSET , negative = False , ** kwargs ): \"\"\"Initialization method. Args: charset (Optional[str]): A set of characters ordered by the amount of area their symbols occupy. Defaults to `DEFAULT_CHARSET` negative (Optional[bool]): Whether or not to reverse the `charset`. **kwargs (dict): Appropriate keyword arguments. See [`BaseDrawer`][picharsso.draw.base.BaseDrawer]. \"\"\" super () . __init__ ( ** kwargs ) self . charset = None self . negative = None self . charset_array = None self . set ( charset = charset , negative = negative )","title":"__init__()"},{"location":"library/draw/gradient/#picharsso.draw.gradient.GradientDrawer.calculate_size","text":"Calculates the size of the image for processing the text matrix. Parameters: Name Type Description Default image_size Tuple[int, int] The height and width of the subject image. required Returns: Type Description Tuple[int, int] The size of the image. Source code in picharsso/draw/gradient.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def calculate_size ( self , image_size ): # Possible dimensions new_h = self . height new_w = self . width # Image dimensions old_h , old_w = image_size # If height is not set, infer it from width if not new_h : new_h = int ( round ( old_h / old_w * new_w / 2.125 )) # If width is not set, infer it from height if not new_w : new_w = int ( round ( old_w / old_h * new_h * 2.125 )) return new_h , new_w","title":"calculate_size()"},{"location":"library/draw/gradient/#picharsso.draw.gradient.GradientDrawer.process","text":"Converts an image to a matrix of text. Parameters: Name Type Description Default image PIL.Image.Image The subject image, with mode = \"RGB\" , and size = (<height>, <width>) . required Returns: Type Description numpy.ndarray The text matrix, with shape = (<height>, <width>) , and dtype = str . Source code in picharsso/draw/gradient.py 82 83 84 85 86 87 88 89 90 91 def process ( self , image ): # Convert the image mode to grayscale. # Normalize the pixel values from a range of (0, 255) to (0, len(self.charset)-1), # to obtain indices for the character set. # Index the character set array with the indices. return self . charset_array [ np . round ( np . array ( image . convert ( \"L\" )) / 255 * ( len ( self . charset ) - 1 ) ) . astype ( int ) ]","title":"process()"},{"location":"library/draw/gradient/#picharsso.draw.gradient.GradientDrawer.set","text":"Sets attributes of the drawer instance. Parameters: Name Type Description Default charset Optional[str] Sets charset . None negative Optional[bool] Sets negative . None **kwargs dict Appropriate keyword arguments. See [ BaseDrawer.set ][picharsso.draw.base.BaseDrawer.set]. {} Source code in picharsso/draw/gradient.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 def set ( self , charset = None , negative = None , ** kwargs ): \"\"\"Sets attributes of the drawer instance. Args: charset (Optional[str]): Sets `charset`. negative (Optional[bool]): Sets `negative`. **kwargs (dict): Appropriate keyword arguments. See [`BaseDrawer.set`][picharsso.draw.base.BaseDrawer.set]. \"\"\" super () . set ( ** kwargs ) if charset is not None : self . charset = charset if negative is not None : self . negative = negative self . charset_array = np . array ( list ( self . charset if not self . negative else self . charset [:: - 1 ]) )","title":"set()"},{"location":"library/format/","text":"format # This package defines formatters for different modes of text output. Formats Refer to the Formats documentation to learn about the supported output formats. DEFAULT_FORMATTER: str # The default formatter. FORMATTERS: dict # The collection of formatters. new_formatter ( mode = 'ansi' , ** kwargs ) # Creates a new formatter instance. Parameters: Name Type Description Default mode Option[str] The mode of the output text. Defaults to DEFAULT_FORMATTER . 'ansi' **kwargs dict Appropriate keyword arguments. See [ BaseFormatter ][picharsso.format.base.BaseFormatter] and others. {} Returns: Type Description Type[picharsso.format.BaseFormatter] The new formatter instance. Source code in picharsso/format/__init__.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def new_formatter ( mode = DEFAULT_FORMATTER , ** kwargs ): \"\"\"Creates a new formatter instance. Args: mode (Option[str]): The mode of the output text. Defaults to `DEFAULT_FORMATTER`. **kwargs (dict): Appropriate keyword arguments. See [`BaseFormatter`][picharsso.format.base.BaseFormatter] and others. Returns: Type[picharsso.format.BaseFormatter] : The new formatter instance. \"\"\" return FORMATTERS [ mode ]( ** kwargs )","title":"__init__"},{"location":"library/format/#format","text":"This package defines formatters for different modes of text output. Formats Refer to the Formats documentation to learn about the supported output formats.","title":"format"},{"location":"library/format/#picharsso.format.__init__.DEFAULT_FORMATTER","text":"The default formatter.","title":"DEFAULT_FORMATTER"},{"location":"library/format/#picharsso.format.__init__.FORMATTERS","text":"The collection of formatters.","title":"FORMATTERS"},{"location":"library/format/#picharsso.format.__init__.new_formatter","text":"Creates a new formatter instance. Parameters: Name Type Description Default mode Option[str] The mode of the output text. Defaults to DEFAULT_FORMATTER . 'ansi' **kwargs dict Appropriate keyword arguments. See [ BaseFormatter ][picharsso.format.base.BaseFormatter] and others. {} Returns: Type Description Type[picharsso.format.BaseFormatter] The new formatter instance. Source code in picharsso/format/__init__.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def new_formatter ( mode = DEFAULT_FORMATTER , ** kwargs ): \"\"\"Creates a new formatter instance. Args: mode (Option[str]): The mode of the output text. Defaults to `DEFAULT_FORMATTER`. **kwargs (dict): Appropriate keyword arguments. See [`BaseFormatter`][picharsso.format.base.BaseFormatter] and others. Returns: Type[picharsso.format.BaseFormatter] : The new formatter instance. \"\"\" return FORMATTERS [ mode ]( ** kwargs )","title":"new_formatter()"},{"location":"library/format/ansi/","text":"ansi # This module defines a formatter for the ANSI coloring scheme . AnsiFormatter # A formatter for the ANSI coloring scheme . Inherits [ BaseFormatter ][picharsso.format.base.BaseFormatter]. color ( text , color ) staticmethod # Applies color to a string of text . Parameters: Name Type Description Default text str The subject text. required color Tuple[int, int, int] The RGB value for the color. required Returns: Type Description str The colored text. Source code in picharsso/format/ansi.py 15 16 17 @staticmethod def color ( text , color ): return f \" { fg ( * color ) }{ text }{ fg . rs } \" translate ( text_matrix ) staticmethod # Applies translatations to text_matrix . Parameters: Name Type Description Default text_matrix numpy.ndarray The subject text matrix, with shape = (<height>, <width>) , and dtype = str . required Returns: Type Description numpy.ndarray The translated text_matrix. Source code in picharsso/format/ansi.py 19 20 21 @staticmethod def translate ( text_matrix ): return text_matrix unify ( text_matrix ) staticmethod # Formats a text_matrix into a single string. Parameters: Name Type Description Default text_matrix numpy.ndarray The subject text matrix, with shape = (<height>, <width>) , and dtype = str . required Returns: Type Description str The formatted string of text art. Source code in picharsso/format/ansi.py 23 24 25 @staticmethod def unify ( text_matrix ): return \" \\n \" . join ([ \"\" . join ( row ) for row in text_matrix ])","title":"ansi"},{"location":"library/format/ansi/#ansi","text":"This module defines a formatter for the ANSI coloring scheme .","title":"ansi"},{"location":"library/format/ansi/#picharsso.format.ansi.AnsiFormatter","text":"A formatter for the ANSI coloring scheme . Inherits [ BaseFormatter ][picharsso.format.base.BaseFormatter].","title":"AnsiFormatter"},{"location":"library/format/ansi/#picharsso.format.ansi.AnsiFormatter.color","text":"Applies color to a string of text . Parameters: Name Type Description Default text str The subject text. required color Tuple[int, int, int] The RGB value for the color. required Returns: Type Description str The colored text. Source code in picharsso/format/ansi.py 15 16 17 @staticmethod def color ( text , color ): return f \" { fg ( * color ) }{ text }{ fg . rs } \"","title":"color()"},{"location":"library/format/ansi/#picharsso.format.ansi.AnsiFormatter.translate","text":"Applies translatations to text_matrix . Parameters: Name Type Description Default text_matrix numpy.ndarray The subject text matrix, with shape = (<height>, <width>) , and dtype = str . required Returns: Type Description numpy.ndarray The translated text_matrix. Source code in picharsso/format/ansi.py 19 20 21 @staticmethod def translate ( text_matrix ): return text_matrix","title":"translate()"},{"location":"library/format/ansi/#picharsso.format.ansi.AnsiFormatter.unify","text":"Formats a text_matrix into a single string. Parameters: Name Type Description Default text_matrix numpy.ndarray The subject text matrix, with shape = (<height>, <width>) , and dtype = str . required Returns: Type Description str The formatted string of text art. Source code in picharsso/format/ansi.py 23 24 25 @staticmethod def unify ( text_matrix ): return \" \\n \" . join ([ \"\" . join ( row ) for row in text_matrix ])","title":"unify()"},{"location":"library/format/base/","text":"base # This module defines an abstract base formatter. Formats Refer to the Formats documentation to learn about the supported output formats. BaseFormatter # An abstract base formatter. Attributes: Name Type Description colorize bool Whether to color the text. vcolor Callable The vectorized implementation of the color method. Note The following methods must be overwritten: [ color ][picharsso.format.base.BaseFormatter.color] [ translate ][picharsso.format.base.BaseFormatter.translate] [ unify ][picharsso.format.base.BaseFormatter.unify] __call__ ( self , text_matrix , image , resample ) special # Applies formatting and colorization on the text_matrix and returns a single string. Parameters: Name Type Description Default text_matrix numpy.ndarray The subject text matrix, with shape = (<height>, <width>) , and dtype = str . required image PIL.Image.Image The subject image. required resample int The resampling filter. required Returns: Type Description str The formatted string of text with color (if specified). Source code in picharsso/format/base.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def __call__ ( self , text_matrix , image , resample ): \"\"\"Applies formatting and colorization on the `text_matrix` and returns a single string. Args: text_matrix (numpy.ndarray): The subject text matrix, with `shape = (<height>, <width>)`, and `dtype = str`. image (PIL.Image.Image): The subject image. resample (int): The resampling filter. Returns: str: The formatted string of text with color (if specified). \"\"\" text_size = text_matrix . shape # Apply any translations. text_matrix = self . translate ( text_matrix ) # Colorize if necessary if self . colorize : # Pool the colors from the original image by resizing it to the size of the text output. # Using the vectorized `color` method, color each element in the `text_martix`. # The vectorized operation takes a `str` from `text_matrix` # and a `List[int, int, int]` from the pooled colors. text_matrix = self . vcolor ( text_matrix , unstructured_to_structured ( np . array ( image . resize ( text_size [:: - 1 ], resample = resample )) . astype ( np . uint8 ) ) . astype ( \"O\" ), ) return self . unify ( text_matrix ) __init__ ( self , colorize = False ) special # Initialization method. Parameters: Name Type Description Default colorize Option[bool] Whether to color the text. False Source code in picharsso/format/base.py 31 32 33 34 35 36 37 38 39 40 def __init__ ( self , colorize = False ): \"\"\"Initialization method. Args: colorize (Option[bool]): Whether to color the text. \"\"\" self . colorize = None BaseFormatter . set ( self , colorize = colorize ) self . vcolor = np . vectorize ( self . color ) color ( text , color ) staticmethod # Applies color to a string of text . Parameters: Name Type Description Default text str The subject text. required color Tuple[int, int, int] The RGB value for the color. required Returns: Type Description str The colored text. Source code in picharsso/format/base.py 79 80 81 82 83 84 85 86 87 88 89 90 @staticmethod @abstractmethod def color ( text , color ): \"\"\"Applies `color` to a string of `text`. Args: text (str): The subject text. color (Tuple[int, int, int]): The `RGB` value for the color. Returns: str: The colored text. \"\"\" set ( self , colorize = None ) # Sets attributes of the formatter instance. Parameters: Name Type Description Default colorize Optional[bool] Sets colorize . None Source code in picharsso/format/base.py 120 121 122 123 124 125 126 127 def set ( self , colorize = None ): \"\"\"Sets attributes of the formatter instance. Args: colorize (Optional[bool]): Sets `colorize`. \"\"\" if colorize is not None : self . colorize = colorize translate ( text_matrix ) staticmethod # Applies translatations to text_matrix . Parameters: Name Type Description Default text_matrix numpy.ndarray The subject text matrix, with shape = (<height>, <width>) , and dtype = str . required Returns: Type Description numpy.ndarray The translated text_matrix. Source code in picharsso/format/base.py 92 93 94 95 96 97 98 99 100 101 102 103 104 @staticmethod @abstractmethod def translate ( text_matrix ): \"\"\"Applies translatations to `text_matrix`. Args: text_matrix (numpy.ndarray): The subject text matrix, with `shape = (<height>, <width>)`, and `dtype = str`. Returns: numpy.ndarray: The translated text_matrix. \"\"\" unify ( text_matrix ) staticmethod # Formats a text_matrix into a single string. Parameters: Name Type Description Default text_matrix numpy.ndarray The subject text matrix, with shape = (<height>, <width>) , and dtype = str . required Returns: Type Description str The formatted string of text art. Source code in picharsso/format/base.py 106 107 108 109 110 111 112 113 114 115 116 117 118 @staticmethod @abstractmethod def unify ( text_matrix ): \"\"\"Formats a `text_matrix` into a single string. Args: text_matrix (numpy.ndarray): The subject text matrix, with `shape = (<height>, <width>)`, and `dtype = str`. Returns: str: The formatted string of text art. \"\"\"","title":"base"},{"location":"library/format/base/#base","text":"This module defines an abstract base formatter. Formats Refer to the Formats documentation to learn about the supported output formats.","title":"base"},{"location":"library/format/base/#picharsso.format.base.BaseFormatter","text":"An abstract base formatter. Attributes: Name Type Description colorize bool Whether to color the text. vcolor Callable The vectorized implementation of the color method. Note The following methods must be overwritten: [ color ][picharsso.format.base.BaseFormatter.color] [ translate ][picharsso.format.base.BaseFormatter.translate] [ unify ][picharsso.format.base.BaseFormatter.unify]","title":"BaseFormatter"},{"location":"library/format/base/#picharsso.format.base.BaseFormatter.__call__","text":"Applies formatting and colorization on the text_matrix and returns a single string. Parameters: Name Type Description Default text_matrix numpy.ndarray The subject text matrix, with shape = (<height>, <width>) , and dtype = str . required image PIL.Image.Image The subject image. required resample int The resampling filter. required Returns: Type Description str The formatted string of text with color (if specified). Source code in picharsso/format/base.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def __call__ ( self , text_matrix , image , resample ): \"\"\"Applies formatting and colorization on the `text_matrix` and returns a single string. Args: text_matrix (numpy.ndarray): The subject text matrix, with `shape = (<height>, <width>)`, and `dtype = str`. image (PIL.Image.Image): The subject image. resample (int): The resampling filter. Returns: str: The formatted string of text with color (if specified). \"\"\" text_size = text_matrix . shape # Apply any translations. text_matrix = self . translate ( text_matrix ) # Colorize if necessary if self . colorize : # Pool the colors from the original image by resizing it to the size of the text output. # Using the vectorized `color` method, color each element in the `text_martix`. # The vectorized operation takes a `str` from `text_matrix` # and a `List[int, int, int]` from the pooled colors. text_matrix = self . vcolor ( text_matrix , unstructured_to_structured ( np . array ( image . resize ( text_size [:: - 1 ], resample = resample )) . astype ( np . uint8 ) ) . astype ( \"O\" ), ) return self . unify ( text_matrix )","title":"__call__()"},{"location":"library/format/base/#picharsso.format.base.BaseFormatter.__init__","text":"Initialization method. Parameters: Name Type Description Default colorize Option[bool] Whether to color the text. False Source code in picharsso/format/base.py 31 32 33 34 35 36 37 38 39 40 def __init__ ( self , colorize = False ): \"\"\"Initialization method. Args: colorize (Option[bool]): Whether to color the text. \"\"\" self . colorize = None BaseFormatter . set ( self , colorize = colorize ) self . vcolor = np . vectorize ( self . color )","title":"__init__()"},{"location":"library/format/base/#picharsso.format.base.BaseFormatter.color","text":"Applies color to a string of text . Parameters: Name Type Description Default text str The subject text. required color Tuple[int, int, int] The RGB value for the color. required Returns: Type Description str The colored text. Source code in picharsso/format/base.py 79 80 81 82 83 84 85 86 87 88 89 90 @staticmethod @abstractmethod def color ( text , color ): \"\"\"Applies `color` to a string of `text`. Args: text (str): The subject text. color (Tuple[int, int, int]): The `RGB` value for the color. Returns: str: The colored text. \"\"\"","title":"color()"},{"location":"library/format/base/#picharsso.format.base.BaseFormatter.set","text":"Sets attributes of the formatter instance. Parameters: Name Type Description Default colorize Optional[bool] Sets colorize . None Source code in picharsso/format/base.py 120 121 122 123 124 125 126 127 def set ( self , colorize = None ): \"\"\"Sets attributes of the formatter instance. Args: colorize (Optional[bool]): Sets `colorize`. \"\"\" if colorize is not None : self . colorize = colorize","title":"set()"},{"location":"library/format/base/#picharsso.format.base.BaseFormatter.translate","text":"Applies translatations to text_matrix . Parameters: Name Type Description Default text_matrix numpy.ndarray The subject text matrix, with shape = (<height>, <width>) , and dtype = str . required Returns: Type Description numpy.ndarray The translated text_matrix. Source code in picharsso/format/base.py 92 93 94 95 96 97 98 99 100 101 102 103 104 @staticmethod @abstractmethod def translate ( text_matrix ): \"\"\"Applies translatations to `text_matrix`. Args: text_matrix (numpy.ndarray): The subject text matrix, with `shape = (<height>, <width>)`, and `dtype = str`. Returns: numpy.ndarray: The translated text_matrix. \"\"\"","title":"translate()"},{"location":"library/format/base/#picharsso.format.base.BaseFormatter.unify","text":"Formats a text_matrix into a single string. Parameters: Name Type Description Default text_matrix numpy.ndarray The subject text matrix, with shape = (<height>, <width>) , and dtype = str . required Returns: Type Description str The formatted string of text art. Source code in picharsso/format/base.py 106 107 108 109 110 111 112 113 114 115 116 117 118 @staticmethod @abstractmethod def unify ( text_matrix ): \"\"\"Formats a `text_matrix` into a single string. Args: text_matrix (numpy.ndarray): The subject text matrix, with `shape = (<height>, <width>)`, and `dtype = str`. Returns: str: The formatted string of text art. \"\"\"","title":"unify()"},{"location":"library/format/html/","text":"html # This module defines a formatter for HTML . HTML_ENTITY_MAP: dict # A dictionary mapping unicode characters to their equivalent HTML entities. HtmlFormatter # A formatter for HTML . Inherits [ BaseFormatter ][picharsso.format.base.BaseFormatter]. color ( text , color ) staticmethod # Applies color to a string of text . Parameters: Name Type Description Default text str The subject text. required color Tuple[int, int, int] The RGB value for the color. required Returns: Type Description str The colored text. Source code in picharsso/format/html.py 22 23 24 @staticmethod def color ( text , color ): return f '<span style=\"color : rgb { tuple ( color ) } ;\"> { text } </span>' translate ( text_matrix ) staticmethod # Applies translatations to text_matrix . Parameters: Name Type Description Default text_matrix numpy.ndarray The subject text matrix, with shape = (<height>, <width>) , and dtype = str . required Returns: Type Description numpy.ndarray The translated text_matrix. Source code in picharsso/format/html.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 @staticmethod def translate ( text_matrix ): unique_chars = np . unique ( text_matrix ) # Change datatype to accomodate strings of varying length text_matrix = text_matrix . astype ( f \"<U { len ( max ( name2codepoint . keys (), key = len )) } \" ) # Change each character to its equivalent entity for char in unique_chars : if char in HTML_ENTITY_MAP : text_matrix [ text_matrix == char ] = f \"& { HTML_ENTITY_MAP [ char ] } \" return text_matrix unify ( text_matrix ) staticmethod # Formats a text_matrix into a single string. Parameters: Name Type Description Default text_matrix numpy.ndarray The subject text matrix, with shape = (<height>, <width>) , and dtype = str . required Returns: Type Description str The formatted string of text art. Source code in picharsso/format/html.py 42 43 44 45 46 @staticmethod def unify ( text_matrix ): return \"<div> {} </div>\" . format ( \" \\n \" . join ([ f \"<div> { '' . join ( row ) } </div>\" for row in text_matrix ]) )","title":"html"},{"location":"library/format/html/#html","text":"This module defines a formatter for HTML .","title":"html"},{"location":"library/format/html/#picharsso.format.html.HTML_ENTITY_MAP","text":"A dictionary mapping unicode characters to their equivalent HTML entities.","title":"HTML_ENTITY_MAP"},{"location":"library/format/html/#picharsso.format.html.HtmlFormatter","text":"A formatter for HTML . Inherits [ BaseFormatter ][picharsso.format.base.BaseFormatter].","title":"HtmlFormatter"},{"location":"library/format/html/#picharsso.format.html.HtmlFormatter.color","text":"Applies color to a string of text . Parameters: Name Type Description Default text str The subject text. required color Tuple[int, int, int] The RGB value for the color. required Returns: Type Description str The colored text. Source code in picharsso/format/html.py 22 23 24 @staticmethod def color ( text , color ): return f '<span style=\"color : rgb { tuple ( color ) } ;\"> { text } </span>'","title":"color()"},{"location":"library/format/html/#picharsso.format.html.HtmlFormatter.translate","text":"Applies translatations to text_matrix . Parameters: Name Type Description Default text_matrix numpy.ndarray The subject text matrix, with shape = (<height>, <width>) , and dtype = str . required Returns: Type Description numpy.ndarray The translated text_matrix. Source code in picharsso/format/html.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 @staticmethod def translate ( text_matrix ): unique_chars = np . unique ( text_matrix ) # Change datatype to accomodate strings of varying length text_matrix = text_matrix . astype ( f \"<U { len ( max ( name2codepoint . keys (), key = len )) } \" ) # Change each character to its equivalent entity for char in unique_chars : if char in HTML_ENTITY_MAP : text_matrix [ text_matrix == char ] = f \"& { HTML_ENTITY_MAP [ char ] } \" return text_matrix","title":"translate()"},{"location":"library/format/html/#picharsso.format.html.HtmlFormatter.unify","text":"Formats a text_matrix into a single string. Parameters: Name Type Description Default text_matrix numpy.ndarray The subject text matrix, with shape = (<height>, <width>) , and dtype = str . required Returns: Type Description str The formatted string of text art. Source code in picharsso/format/html.py 42 43 44 45 46 @staticmethod def unify ( text_matrix ): return \"<div> {} </div>\" . format ( \" \\n \" . join ([ f \"<div> { '' . join ( row ) } </div>\" for row in text_matrix ]) )","title":"unify()"},{"location":"styles/","text":"Styles # Styles refer to the different image processing algorithms that are performed on input images. They affect how images look when viewed in the text form . Procedure # Although the different styles use algorithms that produce different results, there are many common , yet fundamental, steps involved in the entire process. Picharsso defines a [ BaseDrawer ][picharsso.draw.base.BaseDrawer] that abstracts this general procedure. Initialization # This step assigns values to the parameters for the algorithms. Dimensions # Picharsso provides control over the dimensions of the output text with the height and width parameters. Consider the following image: Zima Blue [Zima] Here's what it should look like: height = 32 terminal height width = 32 terminal width Preserving Aspect Ratio The relationship between height and width preserves the aspect ratio of the input image. When either one of the dimensions is set as 0 , it derives its value from the other. Error Assigning 0 to both height and width raises an error. Atleast one of the dimensions must be assigned a non-zero positive integer. Resampling Filter # There are instances when an input image must be scaled to an appropriate size before it can be used as input for an algorithm. During this resizing process, pixels must sampled/ resampled to generate the new, resized, image. Picharsso uses the resampling filters that come with Pillow . The choice of the resampling filter is defined by the resample parameter. Consider the following image: Starry Night [Vincent van Gogh, 1889] Here's what it should look like: resample = 'nearest' 'box' 'bilinear' 'hamming' 'bicubic' 'lanczos' Note All resizing operations use the same filter that is set by resample . Normalization # Pillow supports multiple image modes . For simplicity, the algorithms were designed to work on the RGB image mode. Hence, images must be converted appropriately. White Background A white background is applied to images with the P and RGBA modes. Source Refer to the [ ensure_rgb function][picharsso.utils.ensure_rgb] for more information. Conversion # This step lies at the heart of each style. Resizing # Before the image can be processed, it must be resized appropriately. The scale of the resizing depends on the processing algorithm . Source Refer to the [ calculate_size function][picharsso.draw.base.BaseDrawer.calculate_size] for more information. Processing # The resized image is processed into a text_matrix . Source Refer to the [ process function][picharsso.draw.base.BaseDrawer.process] for more information. Formatting # Before it can be displayed, the text_matrix must be formatted into a single string . The type of formatter used is defined by the mode parameter. Colorization The formatter requires the original image and the choice of resample filter for pooling colors. Refer to the colorization step for more information. Formats Refer to the Formats documentation to learn about the supported output formats. Varieties # All the following styles are implemented using a drawer which inherits from the [ BaseDrawer ][picharsso.draw.base.BaseDrawer]. Consider the following image: Apple Computer [Rob Janoff, 1977] Here's what it should look like: Braille # The Braille style is implemented using the [ BrailleDrawer ][picharsso.draw.braille.BrailleDrawer]. Gradient # The gradient style is implemented using the [ GradientDrawer ][picharsso.draw.gradient.GradientDrawer].","title":"Overview"},{"location":"styles/#styles","text":"Styles refer to the different image processing algorithms that are performed on input images. They affect how images look when viewed in the text form .","title":"Styles"},{"location":"styles/#procedure","text":"Although the different styles use algorithms that produce different results, there are many common , yet fundamental, steps involved in the entire process. Picharsso defines a [ BaseDrawer ][picharsso.draw.base.BaseDrawer] that abstracts this general procedure.","title":"Procedure"},{"location":"styles/#initialization","text":"This step assigns values to the parameters for the algorithms.","title":"Initialization"},{"location":"styles/#dimensions","text":"Picharsso provides control over the dimensions of the output text with the height and width parameters. Consider the following image: Zima Blue [Zima] Here's what it should look like: height = 32 terminal height width = 32 terminal width Preserving Aspect Ratio The relationship between height and width preserves the aspect ratio of the input image. When either one of the dimensions is set as 0 , it derives its value from the other. Error Assigning 0 to both height and width raises an error. Atleast one of the dimensions must be assigned a non-zero positive integer.","title":"Dimensions"},{"location":"styles/#resampling-filter","text":"There are instances when an input image must be scaled to an appropriate size before it can be used as input for an algorithm. During this resizing process, pixels must sampled/ resampled to generate the new, resized, image. Picharsso uses the resampling filters that come with Pillow . The choice of the resampling filter is defined by the resample parameter. Consider the following image: Starry Night [Vincent van Gogh, 1889] Here's what it should look like: resample = 'nearest' 'box' 'bilinear' 'hamming' 'bicubic' 'lanczos' Note All resizing operations use the same filter that is set by resample .","title":"Resampling Filter"},{"location":"styles/#normalization","text":"Pillow supports multiple image modes . For simplicity, the algorithms were designed to work on the RGB image mode. Hence, images must be converted appropriately. White Background A white background is applied to images with the P and RGBA modes. Source Refer to the [ ensure_rgb function][picharsso.utils.ensure_rgb] for more information.","title":"Normalization"},{"location":"styles/#conversion","text":"This step lies at the heart of each style.","title":"Conversion"},{"location":"styles/#resizing","text":"Before the image can be processed, it must be resized appropriately. The scale of the resizing depends on the processing algorithm . Source Refer to the [ calculate_size function][picharsso.draw.base.BaseDrawer.calculate_size] for more information.","title":"Resizing"},{"location":"styles/#processing","text":"The resized image is processed into a text_matrix . Source Refer to the [ process function][picharsso.draw.base.BaseDrawer.process] for more information.","title":"Processing"},{"location":"styles/#formatting","text":"Before it can be displayed, the text_matrix must be formatted into a single string . The type of formatter used is defined by the mode parameter. Colorization The formatter requires the original image and the choice of resample filter for pooling colors. Refer to the colorization step for more information. Formats Refer to the Formats documentation to learn about the supported output formats.","title":"Formatting"},{"location":"styles/#varieties","text":"All the following styles are implemented using a drawer which inherits from the [ BaseDrawer ][picharsso.draw.base.BaseDrawer]. Consider the following image: Apple Computer [Rob Janoff, 1977] Here's what it should look like:","title":"Varieties"},{"location":"styles/#braille","text":"The Braille style is implemented using the [ BrailleDrawer ][picharsso.draw.braille.BrailleDrawer].","title":"Braille"},{"location":"styles/#gradient","text":"The gradient style is implemented using the [ GradientDrawer ][picharsso.draw.gradient.GradientDrawer].","title":"Gradient"},{"location":"styles/braille/","text":"Braille # This style uses the characters of the Braille writing system . Example Consider the following image: Apple Computer [Rob Janoff, 1977] Here's what it should look like: Encoding Traditional Braille characters are made up of 6 dots (\u283f). Since each dot could be in one of 2 states (raised or lowered), there are a total of 64 unique combinations. In Unicode , braille is represented in a block, the Braille Patterns . There are 256 unique characters each in its own 8-dot cell (\u28ff). Procedure # This style is implemented using the [ BrailleDrawer ][picharsso.draw.braille.BrailleDrawer]. Styling Refer to the procedure outlined in the Styles documentation for an overview of the steps common to all styles . Initialization # Threshold # The threshold parameter filters out pixels of the input image whose grayscale intensities are lesser than it. Consider the following image: Tiles ressembling GitHub contributions Here's what it should look like: threshold = 0 70 108 168 210 Matrices # The kernel attribute holds a NumPy ndarray containing the following matrix: \\[ kernel = \\begin{bmatrix} 1 & 8\\\\ 2 & 16\\\\ 4 & 32\\\\ 64 & 128\\end{bmatrix} \\] The Unicode encoding of the 8-dot cell Braille system is done by assigning each of the dots a power of 2 . Each character in the Braille Patterns block has a unique Unicode value that is obtained by summing these powers. The charset_array attribute holds another NumPy ndarray containing all 256 Braille characters. Conversion # Resizing # Assuming the output text should have the dimensions text_height and text_width , the image must be resized according to the following criteria: image_height = 4 * text_height . image_width = 2 * text_width . If either image_height or image_width is 0 , it is derived from the other by preserving the aspect ratio of the original image. Following the above algorithm, each pixel of the resized image will be assigned to one dot (Braille character dot) in the output text. Source Refer to the [ calculate_size function][picharsso.draw.braille.BrailleDrawer.calculate_size] for more information. Processing # The resized image is first converted to its grayscale. Each pixel is set to either 0 or 1 based on whether its grayscale intensity is below or above the threshold . A convolution operation is performed on this filtered image using the kernel matrix. The resultant matrix has the ofsetted Unicode values for the corresponding Braille character. The charset_array is indexed with the resultant \"indices\" matrix, giving the final text_matrix . Source Refer to the [ process function][picharsso.draw.braille.BrailleDrawer.process] for more information.","title":"Braille"},{"location":"styles/braille/#braille","text":"This style uses the characters of the Braille writing system . Example Consider the following image: Apple Computer [Rob Janoff, 1977] Here's what it should look like: Encoding Traditional Braille characters are made up of 6 dots (\u283f). Since each dot could be in one of 2 states (raised or lowered), there are a total of 64 unique combinations. In Unicode , braille is represented in a block, the Braille Patterns . There are 256 unique characters each in its own 8-dot cell (\u28ff).","title":"Braille"},{"location":"styles/braille/#procedure","text":"This style is implemented using the [ BrailleDrawer ][picharsso.draw.braille.BrailleDrawer]. Styling Refer to the procedure outlined in the Styles documentation for an overview of the steps common to all styles .","title":"Procedure"},{"location":"styles/braille/#initialization","text":"","title":"Initialization"},{"location":"styles/braille/#threshold","text":"The threshold parameter filters out pixels of the input image whose grayscale intensities are lesser than it. Consider the following image: Tiles ressembling GitHub contributions Here's what it should look like: threshold = 0 70 108 168 210","title":"Threshold"},{"location":"styles/braille/#matrices","text":"The kernel attribute holds a NumPy ndarray containing the following matrix: \\[ kernel = \\begin{bmatrix} 1 & 8\\\\ 2 & 16\\\\ 4 & 32\\\\ 64 & 128\\end{bmatrix} \\] The Unicode encoding of the 8-dot cell Braille system is done by assigning each of the dots a power of 2 . Each character in the Braille Patterns block has a unique Unicode value that is obtained by summing these powers. The charset_array attribute holds another NumPy ndarray containing all 256 Braille characters.","title":"Matrices"},{"location":"styles/braille/#conversion","text":"","title":"Conversion"},{"location":"styles/braille/#resizing","text":"Assuming the output text should have the dimensions text_height and text_width , the image must be resized according to the following criteria: image_height = 4 * text_height . image_width = 2 * text_width . If either image_height or image_width is 0 , it is derived from the other by preserving the aspect ratio of the original image. Following the above algorithm, each pixel of the resized image will be assigned to one dot (Braille character dot) in the output text. Source Refer to the [ calculate_size function][picharsso.draw.braille.BrailleDrawer.calculate_size] for more information.","title":"Resizing"},{"location":"styles/braille/#processing","text":"The resized image is first converted to its grayscale. Each pixel is set to either 0 or 1 based on whether its grayscale intensity is below or above the threshold . A convolution operation is performed on this filtered image using the kernel matrix. The resultant matrix has the ofsetted Unicode values for the corresponding Braille character. The charset_array is indexed with the resultant \"indices\" matrix, giving the final text_matrix . Source Refer to the [ process function][picharsso.draw.braille.BrailleDrawer.process] for more information.","title":"Processing"},{"location":"styles/gradient/","text":"Gradient # This style uses Unicode characters . Example Consider the following image: Apple Computer [Rob Janoff, 1977] Here's what it should look like: Procedure # This style is implemented using the [ GradientDrawer ][picharsso.draw.gradient.GradientDrawer]. Styling Refer to the procedure outlined in the Styles documentation for an overview of the steps common to all styles . Initialization # Charset # The charset parameter is a string containing characters ordered by their perceived brightness . Consider the following image: Slack Here's what it should look like: charset = ' :!?PG@' (default) '.' '#' '\u2588' Negative # The negative parameter controls whether the charset must be reversed . Consider the following image: GitHub Here's what it should look like: negative = False True Matrices # The charset_array attribute holds a NumPy ndarray containing all the characters in the charset . Conversion # Resizing # Assuming the output text should have the dimensions text_height and text_width , the image must be resized according to the following criteria: image_height = text_height . image_width = text_width . If either image_height or image_width is 0 , it is derived from the other by preserving the aspect ratio of the original image. Following the above algorithm, each pixel of the resized image will be assigned to one character in the output text. Source Refer to the [ calculate_size function][picharsso.draw.gradient.GradientDrawer.calculate_size] for more information. Processing # The resized image is first converted to its grayscale. The image matrix is normalized such that the grayscale range shifts from (0, 255) to (0, len(charset)) . The charset_array is indexed with the resultant \"indices\" matrix, giving the final text_matrix . Source Refer to the [ process function][picharsso.draw.gradient.GradientDrawer.process] for more information.","title":"Gradient"},{"location":"styles/gradient/#gradient","text":"This style uses Unicode characters . Example Consider the following image: Apple Computer [Rob Janoff, 1977] Here's what it should look like:","title":"Gradient"},{"location":"styles/gradient/#procedure","text":"This style is implemented using the [ GradientDrawer ][picharsso.draw.gradient.GradientDrawer]. Styling Refer to the procedure outlined in the Styles documentation for an overview of the steps common to all styles .","title":"Procedure"},{"location":"styles/gradient/#initialization","text":"","title":"Initialization"},{"location":"styles/gradient/#charset","text":"The charset parameter is a string containing characters ordered by their perceived brightness . Consider the following image: Slack Here's what it should look like: charset = ' :!?PG@' (default) '.' '#' '\u2588'","title":"Charset"},{"location":"styles/gradient/#negative","text":"The negative parameter controls whether the charset must be reversed . Consider the following image: GitHub Here's what it should look like: negative = False True","title":"Negative"},{"location":"styles/gradient/#matrices","text":"The charset_array attribute holds a NumPy ndarray containing all the characters in the charset .","title":"Matrices"},{"location":"styles/gradient/#conversion","text":"","title":"Conversion"},{"location":"styles/gradient/#resizing","text":"Assuming the output text should have the dimensions text_height and text_width , the image must be resized according to the following criteria: image_height = text_height . image_width = text_width . If either image_height or image_width is 0 , it is derived from the other by preserving the aspect ratio of the original image. Following the above algorithm, each pixel of the resized image will be assigned to one character in the output text. Source Refer to the [ calculate_size function][picharsso.draw.gradient.GradientDrawer.calculate_size] for more information.","title":"Resizing"},{"location":"styles/gradient/#processing","text":"The resized image is first converted to its grayscale. The image matrix is normalized such that the grayscale range shifts from (0, 255) to (0, len(charset)) . The charset_array is indexed with the resultant \"indices\" matrix, giving the final text_matrix . Source Refer to the [ process function][picharsso.draw.gradient.GradientDrawer.process] for more information.","title":"Processing"}]}